//go:build ignore

package main

import (
	"cmp"
	_ "embed"
	"encoding/xml"
	"fmt"
	"go/format"
	"os"
	"regexp"
	"slices"
	"strings"
	"unicode"

	pc "github.com/Asutorufa/yuhaiin/pkg/protos/config"
	"golang.org/x/text/cases"
	"golang.org/x/text/language"
	"google.golang.org/protobuf/reflect/protoreflect"
)

//go:embed strings.xml
var Strings []byte

type Resources struct {
	XMLName      xml.Name      `xml:"resources"`
	Strings      []String      `xml:"string"`
	StringArrays []StringArray `xml:"string-array"`
}

type String struct {
	Name  string `xml:"name,attr"`
	Value string `xml:",chardata"`
}

type StringArray struct {
	Name  string   `xml:"name,attr"`
	Items []string `xml:"item"`
}

// copy from https://github.com/samber/lo/blob/dc8a175ce1dbd833bdd14404d95c41b3c72e4ae9/string.go#L152
//
// PascalCase converts string to pascal case.
func PascalCase(str string) string {
	items := Words(str)
	for i := range items {
		items[i] = Capitalize(items[i])
	}
	return strings.Join(items, "")
}

var (
	// bearer:disable go_lang_permissive_regex_validation
	splitWordReg = regexp.MustCompile(`([a-z])([A-Z0-9])|([a-zA-Z])([0-9])|([0-9])([a-zA-Z])|([A-Z])([A-Z])([a-z])`)
	// bearer:disable go_lang_permissive_regex_validation
	splitNumberLetterReg = regexp.MustCompile(`([0-9])([a-zA-Z])`)
)

// Words splits string into an array of its words.
func Words(str string) []string {
	str = splitWordReg.ReplaceAllString(str, `$1$3$5$7 $2$4$6$8$9`)
	// example: Int8Value => Int 8Value => Int 8 Value
	str = splitNumberLetterReg.ReplaceAllString(str, "$1 $2")
	var result strings.Builder
	for _, r := range str {
		if unicode.IsLetter(r) || unicode.IsDigit(r) {
			result.WriteRune(r)
		} else {
			result.WriteRune(' ')
		}
	}
	return strings.Fields(result.String())
}

// Capitalize converts the first character of string to upper case and the remaining to lower case.
func Capitalize(str string) string {
	return cases.Title(language.English).String(str)
}

func must(err error) {
	if err != nil {
		panic(err)
	}
}

func main() {
	var s Resources
	err := xml.Unmarshal(Strings, &s)
	must(err)

	slices.SortFunc(s.Strings, func(a, b String) int { return cmp.Compare(a.Name, b.Name) })
	slices.SortFunc(s.StringArrays, func(a, b StringArray) int { return cmp.Compare(a.Name, b.Name) })

	fs := &strings.Builder{}
	fmt.Fprintf(fs, "// Code generated by strings.go; DO NOT EDIT.\n")
	fs.WriteString("package yuhaiin\n\nvar (\n")

	valueMap := make(map[string]string)
	for _, v := range s.Strings {
		fmt.Fprintf(fs, "%s = `%s`\n", PascalCase(v.Name), v.Value)
		valueMap[v.Name] = v.Value
	}

	fs.WriteByte('\n')

	for _, v := range s.StringArrays {
		fmt.Fprintf(fs, "%s = []string{\n", PascalCase(v.Name))
		for _, item := range v.Items {
			if strings.HasPrefix(item, "@string/") {
				v := strings.TrimPrefix(item, "@string/")
				if _, ok := valueMap[v]; ok {
					fmt.Fprintf(fs, "  %s,\n", PascalCase(v))
					continue
				}
			}
			fmt.Fprintf(fs, "  `%s`,\n", item)
		}
		fmt.Fprintf(fs, "}\n\n")
	}

	fs.WriteString(")\n\n")

	PrintSettingsFields(fs)
	fmt.Println(fs.String())

	result, err := format.Source([]byte(fs.String()))
	must(err)

	err = os.WriteFile("strings.go", result, os.ModePerm)
	must(err)
}

func PrintSettingsFields(str *strings.Builder) {
	ss := &pc.Setting{}

	msg := ss.ProtoReflect().Descriptor()

	values := []string{}
	for i := 0; i < msg.Fields().Len(); i++ {
		fd := msg.Fields().Get(i)
		values = append(values, printValuePath(fd)...)
	}

	resources := &Resources{}

	for _, v := range values {
		resources.Strings = append(resources.Strings, String{
			Name:  v,
			Value: v,
		})
	}

	data, _ := xml.MarshalIndent(resources, "", "    ")

	str.WriteString("/*\n")
	str.WriteString(`<?xml version="1.0" encoding="utf-8"?>`)
	str.WriteByte('\n')
	str.Write(data)
	str.WriteString("\n*/\n")
}

func printValuePath(msg protoreflect.FieldDescriptor) []string {
	if msg.FullName() == "yuhaiin.listener" {
		return nil
	}

	values := []string{}
	if msg.Kind() == protoreflect.MessageKind {
		for i := 0; i < msg.Message().Fields().Len(); i++ {
			fd := msg.Message().Fields().Get(i)
			values = append(values, printValuePath(fd)...)
		}
	} else {
		return []string{string(msg.FullName())}
	}

	return values
}
