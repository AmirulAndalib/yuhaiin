// Code generated by protoc-gen-go. DO NOT EDIT.
// source: api/api.proto

package api

import (
	context "context"
	fmt "fmt"
	config "github.com/Asutorufa/yuhaiin/config"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type AllGroupOrNode struct {
	Value                []string `protobuf:"bytes,1,rep,name=value,proto3" json:"value,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *AllGroupOrNode) Reset()         { *m = AllGroupOrNode{} }
func (m *AllGroupOrNode) String() string { return proto.CompactTextString(m) }
func (*AllGroupOrNode) ProtoMessage()    {}
func (*AllGroupOrNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{0}
}

func (m *AllGroupOrNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_AllGroupOrNode.Unmarshal(m, b)
}
func (m *AllGroupOrNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_AllGroupOrNode.Marshal(b, m, deterministic)
}
func (m *AllGroupOrNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_AllGroupOrNode.Merge(m, src)
}
func (m *AllGroupOrNode) XXX_Size() int {
	return xxx_messageInfo_AllGroupOrNode.Size(m)
}
func (m *AllGroupOrNode) XXX_DiscardUnknown() {
	xxx_messageInfo_AllGroupOrNode.DiscardUnknown(m)
}

var xxx_messageInfo_AllGroupOrNode proto.InternalMessageInfo

func (m *AllGroupOrNode) GetValue() []string {
	if m != nil {
		return m.Value
	}
	return nil
}

type NowNodeGroupAndNode struct {
	Group                string   `protobuf:"bytes,1,opt,name=group,proto3" json:"group,omitempty"`
	Node                 string   `protobuf:"bytes,2,opt,name=node,proto3" json:"node,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NowNodeGroupAndNode) Reset()         { *m = NowNodeGroupAndNode{} }
func (m *NowNodeGroupAndNode) String() string { return proto.CompactTextString(m) }
func (*NowNodeGroupAndNode) ProtoMessage()    {}
func (*NowNodeGroupAndNode) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{1}
}

func (m *NowNodeGroupAndNode) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_NowNodeGroupAndNode.Unmarshal(m, b)
}
func (m *NowNodeGroupAndNode) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_NowNodeGroupAndNode.Marshal(b, m, deterministic)
}
func (m *NowNodeGroupAndNode) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NowNodeGroupAndNode.Merge(m, src)
}
func (m *NowNodeGroupAndNode) XXX_Size() int {
	return xxx_messageInfo_NowNodeGroupAndNode.Size(m)
}
func (m *NowNodeGroupAndNode) XXX_DiscardUnknown() {
	xxx_messageInfo_NowNodeGroupAndNode.DiscardUnknown(m)
}

var xxx_messageInfo_NowNodeGroupAndNode proto.InternalMessageInfo

func (m *NowNodeGroupAndNode) GetGroup() string {
	if m != nil {
		return m.Group
	}
	return ""
}

func (m *NowNodeGroupAndNode) GetNode() string {
	if m != nil {
		return m.Node
	}
	return ""
}

type DownAndUP struct {
	Download             uint64   `protobuf:"varint,1,opt,name=Download,proto3" json:"Download,omitempty"`
	Upload               uint64   `protobuf:"varint,2,opt,name=Upload,proto3" json:"Upload,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DownAndUP) Reset()         { *m = DownAndUP{} }
func (m *DownAndUP) String() string { return proto.CompactTextString(m) }
func (*DownAndUP) ProtoMessage()    {}
func (*DownAndUP) Descriptor() ([]byte, []int) {
	return fileDescriptor_1b40cafcd4234784, []int{2}
}

func (m *DownAndUP) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DownAndUP.Unmarshal(m, b)
}
func (m *DownAndUP) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DownAndUP.Marshal(b, m, deterministic)
}
func (m *DownAndUP) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DownAndUP.Merge(m, src)
}
func (m *DownAndUP) XXX_Size() int {
	return xxx_messageInfo_DownAndUP.Size(m)
}
func (m *DownAndUP) XXX_DiscardUnknown() {
	xxx_messageInfo_DownAndUP.DiscardUnknown(m)
}

var xxx_messageInfo_DownAndUP proto.InternalMessageInfo

func (m *DownAndUP) GetDownload() uint64 {
	if m != nil {
		return m.Download
	}
	return 0
}

func (m *DownAndUP) GetUpload() uint64 {
	if m != nil {
		return m.Upload
	}
	return 0
}

func init() {
	proto.RegisterType((*AllGroupOrNode)(nil), "yuhaiin.api.allGroupOrNode")
	proto.RegisterType((*NowNodeGroupAndNode)(nil), "yuhaiin.api.NowNodeGroupAndNode")
	proto.RegisterType((*DownAndUP)(nil), "yuhaiin.api.DownAndUP")
}

func init() {
	proto.RegisterFile("api/api.proto", fileDescriptor_1b40cafcd4234784)
}

var fileDescriptor_1b40cafcd4234784 = []byte{
	// 542 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0x41, 0x4f, 0xdb, 0x4c,
	0x10, 0x4d, 0x80, 0x0f, 0xc8, 0xe4, 0x83, 0x4a, 0x4b, 0x45, 0x51, 0xa8, 0xaa, 0xc8, 0x87, 0x8a,
	0x93, 0x5d, 0xb5, 0xd7, 0xb6, 0xd4, 0x4d, 0xa8, 0x85, 0x40, 0x80, 0x6c, 0xa5, 0x87, 0xde, 0xd6,
	0xf6, 0xe0, 0xac, 0xba, 0xd9, 0x5d, 0xd9, 0xbb, 0x4d, 0x73, 0xed, 0x2f, 0xaf, 0xbc, 0x76, 0x02,
	0x94, 0x3a, 0xa9, 0xc2, 0x29, 0x99, 0x9d, 0x79, 0x6f, 0xfc, 0xde, 0x3e, 0xd9, 0xb0, 0x47, 0x15,
	0xf3, 0xa8, 0x62, 0xae, 0xca, 0xa5, 0x96, 0xa4, 0x3b, 0x33, 0x63, 0xca, 0x98, 0x70, 0xa9, 0x62,
	0xbd, 0xe3, 0x4c, 0xca, 0x8c, 0xa3, 0x67, 0x5b, 0xb1, 0xb9, 0xf5, 0x70, 0xa2, 0xf4, 0xac, 0x9a,
	0xec, 0xbd, 0xfa, 0xb3, 0x39, 0xcd, 0xa9, 0x52, 0x98, 0x17, 0x75, 0xff, 0x20, 0x91, 0xe2, 0x96,
	0x65, 0x5e, 0xf5, 0x53, 0x1d, 0x3a, 0xaf, 0x61, 0x9f, 0x72, 0x1e, 0xe4, 0xd2, 0xa8, 0xeb, 0xfc,
	0x4a, 0xa6, 0x48, 0x9e, 0xc3, 0x7f, 0x3f, 0x28, 0x37, 0x78, 0xd4, 0xee, 0x6f, 0x9e, 0x74, 0xc2,
	0xaa, 0x70, 0x4e, 0xe1, 0xe0, 0x4a, 0x4e, 0xcb, 0x01, 0x3b, 0xeb, 0x8b, 0x74, 0x3e, 0x9c, 0x95,
	0xf5, 0x51, 0xbb, 0xdf, 0x2e, 0x87, 0x6d, 0x41, 0x08, 0x6c, 0x09, 0x99, 0xe2, 0xd1, 0x86, 0x3d,
	0xb4, 0xff, 0x9d, 0x53, 0xe8, 0x0c, 0xe5, 0x54, 0xf8, 0x22, 0x1d, 0xdd, 0x90, 0x1e, 0xec, 0x96,
	0x05, 0x97, 0x34, 0xb5, 0xc8, 0xad, 0x70, 0x51, 0x93, 0x43, 0xd8, 0x1e, 0x29, 0xdb, 0xd9, 0xb0,
	0x9d, 0xba, 0x7a, 0xfb, 0x0b, 0x60, 0x93, 0x2a, 0x46, 0x4e, 0xa1, 0x7b, 0x93, 0xcb, 0x04, 0x8b,
	0xe2, 0x5c, 0x30, 0x4d, 0x0e, 0xdd, 0x4a, 0xb6, 0x3b, 0x97, 0xed, 0x9e, 0x95, 0x9e, 0xf4, 0x1a,
	0xce, 0x9d, 0x16, 0x79, 0x0f, 0xbb, 0x03, 0xce, 0x50, 0xe8, 0x6b, 0xb1, 0x06, 0xfa, 0x6e, 0xfd,
	0xd9, 0xcf, 0xb5, 0xd6, 0x7f, 0x84, 0x4e, 0x80, 0x7a, 0x60, 0x2f, 0xa1, 0x11, 0xfe, 0xc2, 0x9d,
	0x5f, 0x7b, 0x7d, 0x5b, 0x11, 0x6a, 0xcd, 0x44, 0x56, 0xe1, 0xa3, 0x05, 0xbe, 0x69, 0x6e, 0xc9,
	0xfe, 0x4f, 0xf0, 0x7f, 0x88, 0x6c, 0xa2, 0x64, 0xae, 0x43, 0xc3, 0x71, 0x0d, 0x05, 0x3e, 0xec,
	0x06, 0xa8, 0x6d, 0x0e, 0x1a, 0xd1, 0xc7, 0xee, 0xbd, 0xdc, 0xba, 0x0f, 0x23, 0xe6, 0xb4, 0xc8,
	0x17, 0xd8, 0x09, 0x50, 0xdb, 0x08, 0xbd, 0x7c, 0xc4, 0x10, 0xe9, 0x9c, 0x89, 0xec, 0x6b, 0x99,
	0xbb, 0x55, 0x3c, 0x37, 0x40, 0x2c, 0xcf, 0x74, 0x91, 0x4a, 0x3a, 0x69, 0x96, 0xd4, 0x7f, 0x40,
	0xf6, 0x97, 0x3c, 0x3b, 0x2d, 0x72, 0x01, 0x7b, 0x83, 0x31, 0x15, 0x19, 0xd6, 0x6d, 0xb2, 0x12,
	0xb4, 0xc4, 0xa9, 0x0f, 0xd0, 0x19, 0xa9, 0x94, 0x6a, 0x8c, 0x4c, 0xbc, 0x86, 0xd1, 0x43, 0xe8,
	0x06, 0xa8, 0x23, 0x13, 0x5f, 0x32, 0xf1, 0xbd, 0x58, 0xd7, 0xeb, 0x73, 0x00, 0x3f, 0x4d, 0x6b,
	0x96, 0xa7, 0xd9, 0x7d, 0x09, 0x7b, 0x43, 0xe4, 0x68, 0xf5, 0x3c, 0x9d, 0xed, 0x02, 0x76, 0x2e,
	0xa9, 0x46, 0x91, 0xcc, 0xfe, 0xc1, 0xe4, 0xa5, 0x9b, 0x9c, 0x16, 0x19, 0xc0, 0xb3, 0x00, 0xb5,
	0xcf, 0xf9, 0xdd, 0x5b, 0xa6, 0xd9, 0xf0, 0xfb, 0xcb, 0x16, 0xf3, 0xf6, 0x89, 0xba, 0x21, 0xa6,
	0x26, 0xc1, 0x74, 0x54, 0xbe, 0x5b, 0x1e, 0xef, 0x1c, 0x4a, 0x13, 0x73, 0xac, 0xd4, 0xad, 0x7a,
	0xa2, 0x10, 0xf6, 0x23, 0x26, 0x32, 0x8e, 0xe7, 0xa2, 0xd0, 0x54, 0x24, 0xab, 0xa2, 0xbe, 0x82,
	0xef, 0xa4, 0xfd, 0xa6, 0xfd, 0xd9, 0xf9, 0xd6, 0xcf, 0x98, 0x1e, 0x9b, 0xd8, 0x4d, 0xe4, 0xc4,
	0xf3, 0x0b, 0xa3, 0x65, 0x6e, 0x6e, 0xa9, 0x57, 0x0b, 0x2a, 0xbf, 0x1b, 0xf1, 0xb6, 0xc5, 0xbf,
	0xfb, 0x1d, 0x00, 0x00, 0xff, 0xff, 0xdb, 0xb0, 0x93, 0x2b, 0x49, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ApiClient is the client API for Api service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ApiClient interface {
	ProcessInit(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	ClientOn(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	ProcessExit(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	GetConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*config.Setting, error)
	SetConfig(ctx context.Context, in *config.Setting, opts ...grpc.CallOption) (*empty.Empty, error)
	ReimportRule(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	GetGroup(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AllGroupOrNode, error)
	GetNode(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*AllGroupOrNode, error)
	GetNowGroupAndName(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NowNodeGroupAndNode, error)
	ChangeNowNode(ctx context.Context, in *NowNodeGroupAndNode, opts ...grpc.CallOption) (*empty.Empty, error)
	UpdateSub(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error)
	GetSubLinks(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AllGroupOrNode, error)
	AddSubLink(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*AllGroupOrNode, error)
	DeleteSubLink(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*AllGroupOrNode, error)
	Latency(ctx context.Context, in *NowNodeGroupAndNode, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	GetAllDownAndUP(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DownAndUP, error)
	ReducedUnit(ctx context.Context, in *wrappers.DoubleValue, opts ...grpc.CallOption) (*wrappers.StringValue, error)
	SingleInstance(ctx context.Context, opts ...grpc.CallOption) (Api_SingleInstanceClient, error)
}

type apiClient struct {
	cc grpc.ClientConnInterface
}

func NewApiClient(cc grpc.ClientConnInterface) ApiClient {
	return &apiClient{cc}
}

func (c *apiClient) ProcessInit(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/yuhaiin.api.api/ProcessInit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ClientOn(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/yuhaiin.api.api/ClientOn", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ProcessExit(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/yuhaiin.api.api/ProcessExit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetConfig(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*config.Setting, error) {
	out := new(config.Setting)
	err := c.cc.Invoke(ctx, "/yuhaiin.api.api/GetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) SetConfig(ctx context.Context, in *config.Setting, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/yuhaiin.api.api/SetConfig", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ReimportRule(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/yuhaiin.api.api/ReimportRule", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetGroup(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AllGroupOrNode, error) {
	out := new(AllGroupOrNode)
	err := c.cc.Invoke(ctx, "/yuhaiin.api.api/GetGroup", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetNode(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*AllGroupOrNode, error) {
	out := new(AllGroupOrNode)
	err := c.cc.Invoke(ctx, "/yuhaiin.api.api/GetNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetNowGroupAndName(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*NowNodeGroupAndNode, error) {
	out := new(NowNodeGroupAndNode)
	err := c.cc.Invoke(ctx, "/yuhaiin.api.api/GetNowGroupAndName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ChangeNowNode(ctx context.Context, in *NowNodeGroupAndNode, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/yuhaiin.api.api/ChangeNowNode", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) UpdateSub(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/yuhaiin.api.api/UpdateSub", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetSubLinks(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*AllGroupOrNode, error) {
	out := new(AllGroupOrNode)
	err := c.cc.Invoke(ctx, "/yuhaiin.api.api/GetSubLinks", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) AddSubLink(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*AllGroupOrNode, error) {
	out := new(AllGroupOrNode)
	err := c.cc.Invoke(ctx, "/yuhaiin.api.api/AddSubLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) DeleteSubLink(ctx context.Context, in *wrappers.StringValue, opts ...grpc.CallOption) (*AllGroupOrNode, error) {
	out := new(AllGroupOrNode)
	err := c.cc.Invoke(ctx, "/yuhaiin.api.api/DeleteSubLink", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) Latency(ctx context.Context, in *NowNodeGroupAndNode, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, "/yuhaiin.api.api/Latency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) GetAllDownAndUP(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*DownAndUP, error) {
	out := new(DownAndUP)
	err := c.cc.Invoke(ctx, "/yuhaiin.api.api/GetAllDownAndUP", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) ReducedUnit(ctx context.Context, in *wrappers.DoubleValue, opts ...grpc.CallOption) (*wrappers.StringValue, error) {
	out := new(wrappers.StringValue)
	err := c.cc.Invoke(ctx, "/yuhaiin.api.api/ReducedUnit", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiClient) SingleInstance(ctx context.Context, opts ...grpc.CallOption) (Api_SingleInstanceClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Api_serviceDesc.Streams[0], "/yuhaiin.api.api/SingleInstance", opts...)
	if err != nil {
		return nil, err
	}
	x := &apiSingleInstanceClient{stream}
	return x, nil
}

type Api_SingleInstanceClient interface {
	Send(*wrappers.StringValue) error
	Recv() (*wrappers.StringValue, error)
	grpc.ClientStream
}

type apiSingleInstanceClient struct {
	grpc.ClientStream
}

func (x *apiSingleInstanceClient) Send(m *wrappers.StringValue) error {
	return x.ClientStream.SendMsg(m)
}

func (x *apiSingleInstanceClient) Recv() (*wrappers.StringValue, error) {
	m := new(wrappers.StringValue)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ApiServer is the server API for Api service.
type ApiServer interface {
	ProcessInit(context.Context, *empty.Empty) (*empty.Empty, error)
	ClientOn(context.Context, *empty.Empty) (*empty.Empty, error)
	ProcessExit(context.Context, *empty.Empty) (*empty.Empty, error)
	GetConfig(context.Context, *empty.Empty) (*config.Setting, error)
	SetConfig(context.Context, *config.Setting) (*empty.Empty, error)
	ReimportRule(context.Context, *empty.Empty) (*empty.Empty, error)
	GetGroup(context.Context, *empty.Empty) (*AllGroupOrNode, error)
	GetNode(context.Context, *wrappers.StringValue) (*AllGroupOrNode, error)
	GetNowGroupAndName(context.Context, *empty.Empty) (*NowNodeGroupAndNode, error)
	ChangeNowNode(context.Context, *NowNodeGroupAndNode) (*empty.Empty, error)
	UpdateSub(context.Context, *empty.Empty) (*empty.Empty, error)
	GetSubLinks(context.Context, *empty.Empty) (*AllGroupOrNode, error)
	AddSubLink(context.Context, *wrappers.StringValue) (*AllGroupOrNode, error)
	DeleteSubLink(context.Context, *wrappers.StringValue) (*AllGroupOrNode, error)
	Latency(context.Context, *NowNodeGroupAndNode) (*wrappers.StringValue, error)
	GetAllDownAndUP(context.Context, *empty.Empty) (*DownAndUP, error)
	ReducedUnit(context.Context, *wrappers.DoubleValue) (*wrappers.StringValue, error)
	SingleInstance(Api_SingleInstanceServer) error
}

// UnimplementedApiServer can be embedded to have forward compatible implementations.
type UnimplementedApiServer struct {
}

func (*UnimplementedApiServer) ProcessInit(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessInit not implemented")
}
func (*UnimplementedApiServer) ClientOn(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ClientOn not implemented")
}
func (*UnimplementedApiServer) ProcessExit(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessExit not implemented")
}
func (*UnimplementedApiServer) GetConfig(ctx context.Context, req *empty.Empty) (*config.Setting, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConfig not implemented")
}
func (*UnimplementedApiServer) SetConfig(ctx context.Context, req *config.Setting) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetConfig not implemented")
}
func (*UnimplementedApiServer) ReimportRule(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReimportRule not implemented")
}
func (*UnimplementedApiServer) GetGroup(ctx context.Context, req *empty.Empty) (*AllGroupOrNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGroup not implemented")
}
func (*UnimplementedApiServer) GetNode(ctx context.Context, req *wrappers.StringValue) (*AllGroupOrNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (*UnimplementedApiServer) GetNowGroupAndName(ctx context.Context, req *empty.Empty) (*NowNodeGroupAndNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNowGroupAndName not implemented")
}
func (*UnimplementedApiServer) ChangeNowNode(ctx context.Context, req *NowNodeGroupAndNode) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeNowNode not implemented")
}
func (*UnimplementedApiServer) UpdateSub(ctx context.Context, req *empty.Empty) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateSub not implemented")
}
func (*UnimplementedApiServer) GetSubLinks(ctx context.Context, req *empty.Empty) (*AllGroupOrNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSubLinks not implemented")
}
func (*UnimplementedApiServer) AddSubLink(ctx context.Context, req *wrappers.StringValue) (*AllGroupOrNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddSubLink not implemented")
}
func (*UnimplementedApiServer) DeleteSubLink(ctx context.Context, req *wrappers.StringValue) (*AllGroupOrNode, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSubLink not implemented")
}
func (*UnimplementedApiServer) Latency(ctx context.Context, req *NowNodeGroupAndNode) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Latency not implemented")
}
func (*UnimplementedApiServer) GetAllDownAndUP(ctx context.Context, req *empty.Empty) (*DownAndUP, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllDownAndUP not implemented")
}
func (*UnimplementedApiServer) ReducedUnit(ctx context.Context, req *wrappers.DoubleValue) (*wrappers.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReducedUnit not implemented")
}
func (*UnimplementedApiServer) SingleInstance(srv Api_SingleInstanceServer) error {
	return status.Errorf(codes.Unimplemented, "method SingleInstance not implemented")
}

func RegisterApiServer(s *grpc.Server, srv ApiServer) {
	s.RegisterService(&_Api_serviceDesc, srv)
}

func _Api_ProcessInit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ProcessInit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.api.api/ProcessInit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ProcessInit(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ClientOn_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ClientOn(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.api.api/ClientOn",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ClientOn(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ProcessExit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ProcessExit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.api.api/ProcessExit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ProcessExit(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.api.api/GetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetConfig(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_SetConfig_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(config.Setting)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).SetConfig(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.api.api/SetConfig",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).SetConfig(ctx, req.(*config.Setting))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ReimportRule_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ReimportRule(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.api.api/ReimportRule",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ReimportRule(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetGroup_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetGroup(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.api.api/GetGroup",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetGroup(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.api.api/GetNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetNode(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetNowGroupAndName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetNowGroupAndName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.api.api/GetNowGroupAndName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetNowGroupAndName(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ChangeNowNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NowNodeGroupAndNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ChangeNowNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.api.api/ChangeNowNode",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ChangeNowNode(ctx, req.(*NowNodeGroupAndNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_UpdateSub_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).UpdateSub(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.api.api/UpdateSub",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).UpdateSub(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetSubLinks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetSubLinks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.api.api/GetSubLinks",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetSubLinks(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_AddSubLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).AddSubLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.api.api/AddSubLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).AddSubLink(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_DeleteSubLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).DeleteSubLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.api.api/DeleteSubLink",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).DeleteSubLink(ctx, req.(*wrappers.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_Latency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NowNodeGroupAndNode)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).Latency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.api.api/Latency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).Latency(ctx, req.(*NowNodeGroupAndNode))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_GetAllDownAndUP_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).GetAllDownAndUP(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.api.api/GetAllDownAndUP",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).GetAllDownAndUP(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_ReducedUnit_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrappers.DoubleValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiServer).ReducedUnit(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.api.api/ReducedUnit",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiServer).ReducedUnit(ctx, req.(*wrappers.DoubleValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _Api_SingleInstance_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ApiServer).SingleInstance(&apiSingleInstanceServer{stream})
}

type Api_SingleInstanceServer interface {
	Send(*wrappers.StringValue) error
	Recv() (*wrappers.StringValue, error)
	grpc.ServerStream
}

type apiSingleInstanceServer struct {
	grpc.ServerStream
}

func (x *apiSingleInstanceServer) Send(m *wrappers.StringValue) error {
	return x.ServerStream.SendMsg(m)
}

func (x *apiSingleInstanceServer) Recv() (*wrappers.StringValue, error) {
	m := new(wrappers.StringValue)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Api_serviceDesc = grpc.ServiceDesc{
	ServiceName: "yuhaiin.api.api",
	HandlerType: (*ApiServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessInit",
			Handler:    _Api_ProcessInit_Handler,
		},
		{
			MethodName: "ClientOn",
			Handler:    _Api_ClientOn_Handler,
		},
		{
			MethodName: "ProcessExit",
			Handler:    _Api_ProcessExit_Handler,
		},
		{
			MethodName: "GetConfig",
			Handler:    _Api_GetConfig_Handler,
		},
		{
			MethodName: "SetConfig",
			Handler:    _Api_SetConfig_Handler,
		},
		{
			MethodName: "ReimportRule",
			Handler:    _Api_ReimportRule_Handler,
		},
		{
			MethodName: "GetGroup",
			Handler:    _Api_GetGroup_Handler,
		},
		{
			MethodName: "GetNode",
			Handler:    _Api_GetNode_Handler,
		},
		{
			MethodName: "GetNowGroupAndName",
			Handler:    _Api_GetNowGroupAndName_Handler,
		},
		{
			MethodName: "ChangeNowNode",
			Handler:    _Api_ChangeNowNode_Handler,
		},
		{
			MethodName: "UpdateSub",
			Handler:    _Api_UpdateSub_Handler,
		},
		{
			MethodName: "GetSubLinks",
			Handler:    _Api_GetSubLinks_Handler,
		},
		{
			MethodName: "AddSubLink",
			Handler:    _Api_AddSubLink_Handler,
		},
		{
			MethodName: "DeleteSubLink",
			Handler:    _Api_DeleteSubLink_Handler,
		},
		{
			MethodName: "Latency",
			Handler:    _Api_Latency_Handler,
		},
		{
			MethodName: "GetAllDownAndUP",
			Handler:    _Api_GetAllDownAndUP_Handler,
		},
		{
			MethodName: "ReducedUnit",
			Handler:    _Api_ReducedUnit_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SingleInstance",
			Handler:       _Api_SingleInstance_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "api/api.proto",
}
