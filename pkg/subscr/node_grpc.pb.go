// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package subscr

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// NodeManagerClient is the client API for NodeManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type NodeManagerClient interface {
	Now(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Point, error)
	GetNode(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Point, error)
	SaveNode(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Point, error)
	GetNodes(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Node, error)
	AddLink(ctx context.Context, in *NodeLink, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteLink(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ChangeNowNode(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Point, error)
	RefreshSubscr(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteNode(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Latency(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error)
}

type nodeManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewNodeManagerClient(cc grpc.ClientConnInterface) NodeManagerClient {
	return &nodeManagerClient{cc}
}

func (c *nodeManagerClient) Now(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*Point, error) {
	out := new(Point)
	err := c.cc.Invoke(ctx, "/yuhaiin.subscr.node_manager/now", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerClient) GetNode(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Point, error) {
	out := new(Point)
	err := c.cc.Invoke(ctx, "/yuhaiin.subscr.node_manager/get_node", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerClient) SaveNode(ctx context.Context, in *Point, opts ...grpc.CallOption) (*Point, error) {
	out := new(Point)
	err := c.cc.Invoke(ctx, "/yuhaiin.subscr.node_manager/save_node", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerClient) GetNodes(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Node, error) {
	out := new(Node)
	err := c.cc.Invoke(ctx, "/yuhaiin.subscr.node_manager/get_nodes", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerClient) AddLink(ctx context.Context, in *NodeLink, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/yuhaiin.subscr.node_manager/add_link", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerClient) DeleteLink(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/yuhaiin.subscr.node_manager/delete_link", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerClient) ChangeNowNode(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*Point, error) {
	out := new(Point)
	err := c.cc.Invoke(ctx, "/yuhaiin.subscr.node_manager/change_now_node", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerClient) RefreshSubscr(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/yuhaiin.subscr.node_manager/refresh_subscr", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerClient) DeleteNode(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/yuhaiin.subscr.node_manager/delete_node", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *nodeManagerClient) Latency(ctx context.Context, in *wrapperspb.StringValue, opts ...grpc.CallOption) (*wrapperspb.StringValue, error) {
	out := new(wrapperspb.StringValue)
	err := c.cc.Invoke(ctx, "/yuhaiin.subscr.node_manager/latency", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// NodeManagerServer is the server API for NodeManager service.
// All implementations must embed UnimplementedNodeManagerServer
// for forward compatibility
type NodeManagerServer interface {
	Now(context.Context, *emptypb.Empty) (*Point, error)
	GetNode(context.Context, *wrapperspb.StringValue) (*Point, error)
	SaveNode(context.Context, *Point) (*Point, error)
	GetNodes(context.Context, *wrapperspb.StringValue) (*Node, error)
	AddLink(context.Context, *NodeLink) (*emptypb.Empty, error)
	DeleteLink(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	ChangeNowNode(context.Context, *wrapperspb.StringValue) (*Point, error)
	RefreshSubscr(context.Context, *emptypb.Empty) (*emptypb.Empty, error)
	DeleteNode(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error)
	Latency(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error)
	mustEmbedUnimplementedNodeManagerServer()
}

// UnimplementedNodeManagerServer must be embedded to have forward compatible implementations.
type UnimplementedNodeManagerServer struct {
}

func (UnimplementedNodeManagerServer) Now(context.Context, *emptypb.Empty) (*Point, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Now not implemented")
}
func (UnimplementedNodeManagerServer) GetNode(context.Context, *wrapperspb.StringValue) (*Point, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNode not implemented")
}
func (UnimplementedNodeManagerServer) SaveNode(context.Context, *Point) (*Point, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveNode not implemented")
}
func (UnimplementedNodeManagerServer) GetNodes(context.Context, *wrapperspb.StringValue) (*Node, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetNodes not implemented")
}
func (UnimplementedNodeManagerServer) AddLink(context.Context, *NodeLink) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddLink not implemented")
}
func (UnimplementedNodeManagerServer) DeleteLink(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteLink not implemented")
}
func (UnimplementedNodeManagerServer) ChangeNowNode(context.Context, *wrapperspb.StringValue) (*Point, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeNowNode not implemented")
}
func (UnimplementedNodeManagerServer) RefreshSubscr(context.Context, *emptypb.Empty) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshSubscr not implemented")
}
func (UnimplementedNodeManagerServer) DeleteNode(context.Context, *wrapperspb.StringValue) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteNode not implemented")
}
func (UnimplementedNodeManagerServer) Latency(context.Context, *wrapperspb.StringValue) (*wrapperspb.StringValue, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Latency not implemented")
}
func (UnimplementedNodeManagerServer) mustEmbedUnimplementedNodeManagerServer() {}

// UnsafeNodeManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to NodeManagerServer will
// result in compilation errors.
type UnsafeNodeManagerServer interface {
	mustEmbedUnimplementedNodeManagerServer()
}

func RegisterNodeManagerServer(s grpc.ServiceRegistrar, srv NodeManagerServer) {
	s.RegisterService(&NodeManager_ServiceDesc, srv)
}

func _NodeManager_Now_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServer).Now(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.subscr.node_manager/now",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServer).Now(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManager_GetNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServer).GetNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.subscr.node_manager/get_node",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServer).GetNode(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManager_SaveNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Point)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServer).SaveNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.subscr.node_manager/save_node",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServer).SaveNode(ctx, req.(*Point))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManager_GetNodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServer).GetNodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.subscr.node_manager/get_nodes",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServer).GetNodes(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManager_AddLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NodeLink)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServer).AddLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.subscr.node_manager/add_link",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServer).AddLink(ctx, req.(*NodeLink))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManager_DeleteLink_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServer).DeleteLink(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.subscr.node_manager/delete_link",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServer).DeleteLink(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManager_ChangeNowNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServer).ChangeNowNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.subscr.node_manager/change_now_node",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServer).ChangeNowNode(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManager_RefreshSubscr_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServer).RefreshSubscr(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.subscr.node_manager/refresh_subscr",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServer).RefreshSubscr(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManager_DeleteNode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServer).DeleteNode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.subscr.node_manager/delete_node",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServer).DeleteNode(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

func _NodeManager_Latency_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(wrapperspb.StringValue)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(NodeManagerServer).Latency(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/yuhaiin.subscr.node_manager/latency",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(NodeManagerServer).Latency(ctx, req.(*wrapperspb.StringValue))
	}
	return interceptor(ctx, in, info, handler)
}

// NodeManager_ServiceDesc is the grpc.ServiceDesc for NodeManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var NodeManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "yuhaiin.subscr.node_manager",
	HandlerType: (*NodeManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "now",
			Handler:    _NodeManager_Now_Handler,
		},
		{
			MethodName: "get_node",
			Handler:    _NodeManager_GetNode_Handler,
		},
		{
			MethodName: "save_node",
			Handler:    _NodeManager_SaveNode_Handler,
		},
		{
			MethodName: "get_nodes",
			Handler:    _NodeManager_GetNodes_Handler,
		},
		{
			MethodName: "add_link",
			Handler:    _NodeManager_AddLink_Handler,
		},
		{
			MethodName: "delete_link",
			Handler:    _NodeManager_DeleteLink_Handler,
		},
		{
			MethodName: "change_now_node",
			Handler:    _NodeManager_ChangeNowNode_Handler,
		},
		{
			MethodName: "refresh_subscr",
			Handler:    _NodeManager_RefreshSubscr_Handler,
		},
		{
			MethodName: "delete_node",
			Handler:    _NodeManager_DeleteNode_Handler,
		},
		{
			MethodName: "latency",
			Handler:    _NodeManager_Latency_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "node.proto",
}
