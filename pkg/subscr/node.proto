syntax = "proto3";

package yuhaiin.subscr;

option go_package = "github.com/Asutorufa/yuhaiin/pkg/subscr/utils";


import "google/protobuf/empty.proto";
import "google/protobuf/wrappers.proto";

message point{
    string n_hash = 1 [json_name="yuhaiin_hash"];
    string n_name = 2 [json_name="yuhaiin_name"];
    string n_group = 3 [json_name="yuhaiin_group"];
    enum origin{
        node_origin_reserve = 0;
        remote = 101;
        manual = 102;
    }
    origin n_origin = 4 [json_name="yuhaiin_origin"];
    oneof node{
        shadowsocks shadowsocks = 5 [json_name="shadowsocks"];
        shadowsocksr shadowsocksr = 6 [json_name="shadowsocksr"];
        vmess vmess = 7 [json_name="vmess"];
    }
}

message shadowsocks{
    string server = 1 [json_name="server"];
    string port = 2 [json_name="port"];
    string method = 3 [json_name="method"];
    string password = 4 [json_name="password"];
    string plugin = 5 [json_name="plugin"];
    string plugin_opt = 6 [json_name="plugin_opt"];
}

message shadowsocksr{
    string server = 1 [json_name="server"];
    string port = 2 [json_name="port"];
    string method = 3 [json_name="method"];
    string password = 4 [json_name="password"];
    string obfs = 5 [json_name="obfs"];
    string obfsparam = 6 [json_name="obfsparam"];
    string protocol = 7 [json_name="protocol"];
    string protoparam = 8 [json_name="protoparam"];
}

message vmess{
    // address
    string address = 2 [json_name="add"];
    string port = 3 [json_name="port"];
    // uuid
    string uuid = 4 [json_name="id"];
    // alter id
    string alter_id = 5 [json_name="aid"];
    // name
    string ps = 6 [json_name="ps"];
    // (tcp\kcp\ws\h2\quic)
    string net = 7 [json_name="net"];
    // fake type [(none\http\srtp\utp\wechat-video) *tcp or kcp or QUIC]
    string type = 8 [json_name="type"];
    string tls = 9 [json_name="tls"];
	// 1)http host(cut up with (,) )
	// 2)ws host
	// 3)h2 host
	// 4)QUIC security
    string host = 10 [json_name="host"];
    // 1)ws path
    // 2)h2 path
    // 3)QUIC key/Kcp seed
    string path = 11 [json_name="path"];
    string v = 12 [json_name="v"];
    bool verify_cert = 13 [json_name="verify_cert"];
    int64 class = 14 [json_name="class"];
}

message vmess2{
    // address
    string address = 2 [json_name="add"];
    int32 port = 3 [json_name="port"];
    // uuid
    string uuid = 4 [json_name="id"];
    // alter id
    int32 alter_id = 5 [json_name="aid"];
    // name
    string ps = 6 [json_name="ps"];
    // (tcp\kcp\ws\h2\quic)
    string net = 7 [json_name="net"];
    // fake type [(none\http\srtp\utp\wechat-video) *tcp or kcp or QUIC]
    string type = 8 [json_name="type"];
    string tls = 9 [json_name="tls"];
	// 1)http host(cut up with (,) )
	// 2)ws host
	// 3)h2 host
	// 4)QUIC security
    string host = 10 [json_name="host"];
    // 1)ws path
    // 2)h2 path
    // 3)QUIC key/Kcp seed
    string path = 11 [json_name="path"];
    string v = 12 [json_name="v"];
    bool verify_cert = 13 [json_name="verify_cert"];
    int64 class = 14 [json_name="class"];
}

  
message node{
    point now_node = 1 [json_name="now_node"];
    message link{
        string name = 1 [json_name="name"];
        string type = 2 [json_name="type"];
        string url = 3 [json_name="url"];
    } 
    map<string,link> links = 2 [json_name="links"]; 
    repeated string groups = 3 [json_name="groups"];
    message node_array{
        string group = 1 [json_name="name"];
        repeated string nodes = 2 [json_name="nodes"];
        map<string,string> node_hash_map = 3 [json_name="node_hash_map"];
    }
    map<string,node_array> group_nodes_map = 4 [json_name="group_nodes_map"];
    map<string,point> nodes = 5 [json_name="nodes"];
}

service node_manager{
    rpc now(google.protobuf.Empty)returns(point);
    rpc get_node(google.protobuf.StringValue)returns(point);
    rpc add_node(point)returns(google.protobuf.Empty);
    rpc get_nodes(google.protobuf.StringValue)returns(node);
    rpc add_link(node.link)returns(google.protobuf.Empty);
    rpc delete_link(google.protobuf.StringValue)returns(google.protobuf.Empty);
    rpc change_now_node(google.protobuf.StringValue)returns(point);
    rpc refresh_subscr(google.protobuf.Empty)returns(google.protobuf.Empty);
    rpc delete_node(google.protobuf.StringValue)returns(google.protobuf.Empty);
    rpc latency(google.protobuf.StringValue)returns(google.protobuf.StringValue);
}