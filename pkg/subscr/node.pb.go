// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.2
// source: pkg/subscr/node.proto

package subscr

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PointOrigin int32

const (
	Point_node_origin_reserve PointOrigin = 0
	Point_remote              PointOrigin = 101
	Point_manual              PointOrigin = 102
)

// Enum value maps for PointOrigin.
var (
	PointOrigin_name = map[int32]string{
		0:   "node_origin_reserve",
		101: "remote",
		102: "manual",
	}
	PointOrigin_value = map[string]int32{
		"node_origin_reserve": 0,
		"remote":              101,
		"manual":              102,
	}
)

func (x PointOrigin) Enum() *PointOrigin {
	p := new(PointOrigin)
	*p = x
	return p
}

func (x PointOrigin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PointOrigin) Descriptor() protoreflect.EnumDescriptor {
	return file_pkg_subscr_node_proto_enumTypes[0].Descriptor()
}

func (PointOrigin) Type() protoreflect.EnumType {
	return &file_pkg_subscr_node_proto_enumTypes[0]
}

func (x PointOrigin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PointOrigin.Descriptor instead.
func (PointOrigin) EnumDescriptor() ([]byte, []int) {
	return file_pkg_subscr_node_proto_rawDescGZIP(), []int{0, 0}
}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NHash   string      `protobuf:"bytes,1,opt,name=n_hash,json=yuhaiin_hash,proto3" json:"n_hash,omitempty"`
	NName   string      `protobuf:"bytes,2,opt,name=n_name,json=yuhaiin_name,proto3" json:"n_name,omitempty"`
	NGroup  string      `protobuf:"bytes,3,opt,name=n_group,json=yuhaiin_group,proto3" json:"n_group,omitempty"`
	NOrigin PointOrigin `protobuf:"varint,4,opt,name=n_origin,json=yuhaiin_origin,proto3,enum=yuhaiin.subscr.PointOrigin" json:"n_origin,omitempty"`
	// Types that are assignable to Node:
	//	*Point_Shadowsocks
	//	*Point_Shadowsocksr
	//	*Point_Vmess
	//	*Point_Websocket
	//	*Point_Quic
	//	*Point_ObfsHttp
	Node      isPoint_Node     `protobuf_oneof:"node"`
	Protocols []*PointProtocol `protobuf:"bytes,11,rep,name=protocols,proto3" json:"protocols,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_subscr_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_subscr_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_pkg_subscr_node_proto_rawDescGZIP(), []int{0}
}

func (x *Point) GetNHash() string {
	if x != nil {
		return x.NHash
	}
	return ""
}

func (x *Point) GetNName() string {
	if x != nil {
		return x.NName
	}
	return ""
}

func (x *Point) GetNGroup() string {
	if x != nil {
		return x.NGroup
	}
	return ""
}

func (x *Point) GetNOrigin() PointOrigin {
	if x != nil {
		return x.NOrigin
	}
	return Point_node_origin_reserve
}

func (m *Point) GetNode() isPoint_Node {
	if m != nil {
		return m.Node
	}
	return nil
}

func (x *Point) GetShadowsocks() *Shadowsocks {
	if x, ok := x.GetNode().(*Point_Shadowsocks); ok {
		return x.Shadowsocks
	}
	return nil
}

func (x *Point) GetShadowsocksr() *Shadowsocksr {
	if x, ok := x.GetNode().(*Point_Shadowsocksr); ok {
		return x.Shadowsocksr
	}
	return nil
}

func (x *Point) GetVmess() *Vmess {
	if x, ok := x.GetNode().(*Point_Vmess); ok {
		return x.Vmess
	}
	return nil
}

func (x *Point) GetWebsocket() *Websocket {
	if x, ok := x.GetNode().(*Point_Websocket); ok {
		return x.Websocket
	}
	return nil
}

func (x *Point) GetQuic() *Quic {
	if x, ok := x.GetNode().(*Point_Quic); ok {
		return x.Quic
	}
	return nil
}

func (x *Point) GetObfsHttp() *ObfsHttp {
	if x, ok := x.GetNode().(*Point_ObfsHttp); ok {
		return x.ObfsHttp
	}
	return nil
}

func (x *Point) GetProtocols() []*PointProtocol {
	if x != nil {
		return x.Protocols
	}
	return nil
}

type isPoint_Node interface {
	isPoint_Node()
}

type Point_Shadowsocks struct {
	Shadowsocks *Shadowsocks `protobuf:"bytes,5,opt,name=shadowsocks,proto3,oneof"`
}

type Point_Shadowsocksr struct {
	Shadowsocksr *Shadowsocksr `protobuf:"bytes,6,opt,name=shadowsocksr,proto3,oneof"`
}

type Point_Vmess struct {
	Vmess *Vmess `protobuf:"bytes,7,opt,name=vmess,proto3,oneof"`
}

type Point_Websocket struct {
	Websocket *Websocket `protobuf:"bytes,8,opt,name=websocket,proto3,oneof"`
}

type Point_Quic struct {
	Quic *Quic `protobuf:"bytes,9,opt,name=quic,proto3,oneof"`
}

type Point_ObfsHttp struct {
	ObfsHttp *ObfsHttp `protobuf:"bytes,10,opt,name=obfs_http,proto3,oneof"`
}

func (*Point_Shadowsocks) isPoint_Node() {}

func (*Point_Shadowsocksr) isPoint_Node() {}

func (*Point_Vmess) isPoint_Node() {}

func (*Point_Websocket) isPoint_Node() {}

func (*Point_Quic) isPoint_Node() {}

func (*Point_ObfsHttp) isPoint_Node() {}

type Shadowsocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server    string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Port      string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	Method    string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Password  string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Plugin    string `protobuf:"bytes,5,opt,name=plugin,proto3" json:"plugin,omitempty"`
	PluginOpt string `protobuf:"bytes,6,opt,name=plugin_opt,proto3" json:"plugin_opt,omitempty"`
}

func (x *Shadowsocks) Reset() {
	*x = Shadowsocks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_subscr_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shadowsocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shadowsocks) ProtoMessage() {}

func (x *Shadowsocks) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_subscr_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shadowsocks.ProtoReflect.Descriptor instead.
func (*Shadowsocks) Descriptor() ([]byte, []int) {
	return file_pkg_subscr_node_proto_rawDescGZIP(), []int{1}
}

func (x *Shadowsocks) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *Shadowsocks) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *Shadowsocks) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Shadowsocks) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Shadowsocks) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

func (x *Shadowsocks) GetPluginOpt() string {
	if x != nil {
		return x.PluginOpt
	}
	return ""
}

type Shadowsocksr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server     string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Port       string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	Method     string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Password   string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Obfs       string `protobuf:"bytes,5,opt,name=obfs,proto3" json:"obfs,omitempty"`
	Obfsparam  string `protobuf:"bytes,6,opt,name=obfsparam,proto3" json:"obfsparam,omitempty"`
	Protocol   string `protobuf:"bytes,7,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Protoparam string `protobuf:"bytes,8,opt,name=protoparam,proto3" json:"protoparam,omitempty"`
}

func (x *Shadowsocksr) Reset() {
	*x = Shadowsocksr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_subscr_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shadowsocksr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shadowsocksr) ProtoMessage() {}

func (x *Shadowsocksr) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_subscr_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shadowsocksr.ProtoReflect.Descriptor instead.
func (*Shadowsocksr) Descriptor() ([]byte, []int) {
	return file_pkg_subscr_node_proto_rawDescGZIP(), []int{2}
}

func (x *Shadowsocksr) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *Shadowsocksr) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *Shadowsocksr) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Shadowsocksr) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Shadowsocksr) GetObfs() string {
	if x != nil {
		return x.Obfs
	}
	return ""
}

func (x *Shadowsocksr) GetObfsparam() string {
	if x != nil {
		return x.Obfsparam
	}
	return ""
}

func (x *Shadowsocksr) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Shadowsocksr) GetProtoparam() string {
	if x != nil {
		return x.Protoparam
	}
	return ""
}

type Vmess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address
	Address string `protobuf:"bytes,2,opt,name=address,json=add,proto3" json:"address,omitempty"`
	Port    string `protobuf:"bytes,3,opt,name=port,proto3" json:"port,omitempty"`
	// uuid
	Uuid string `protobuf:"bytes,4,opt,name=uuid,json=id,proto3" json:"uuid,omitempty"`
	// alter id
	AlterId string `protobuf:"bytes,5,opt,name=alter_id,json=aid,proto3" json:"alter_id,omitempty"`
	// name
	Ps string `protobuf:"bytes,6,opt,name=ps,proto3" json:"ps,omitempty"`
	// (tcp\kcp\ws\h2\quic)
	Net string `protobuf:"bytes,7,opt,name=net,proto3" json:"net,omitempty"`
	// fake type [(none\http\srtp\utp\wechat-video) *tcp or kcp or QUIC]
	Type string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Tls  string `protobuf:"bytes,9,opt,name=tls,proto3" json:"tls,omitempty"`
	// 1)http host(cut up with (,) )
	// 2)ws host
	// 3)h2 host
	// 4)QUIC security
	Host string `protobuf:"bytes,10,opt,name=host,proto3" json:"host,omitempty"`
	// 1)ws path
	// 2)h2 path
	// 3)QUIC key/Kcp seed
	Path       string `protobuf:"bytes,11,opt,name=path,proto3" json:"path,omitempty"`
	V          string `protobuf:"bytes,12,opt,name=v,proto3" json:"v,omitempty"`
	VerifyCert bool   `protobuf:"varint,13,opt,name=verify_cert,proto3" json:"verify_cert,omitempty"`
	Class      int64  `protobuf:"varint,14,opt,name=class,proto3" json:"class,omitempty"`
	Security   string `protobuf:"bytes,15,opt,name=security,proto3" json:"security,omitempty"`
}

func (x *Vmess) Reset() {
	*x = Vmess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_subscr_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vmess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vmess) ProtoMessage() {}

func (x *Vmess) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_subscr_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vmess.ProtoReflect.Descriptor instead.
func (*Vmess) Descriptor() ([]byte, []int) {
	return file_pkg_subscr_node_proto_rawDescGZIP(), []int{3}
}

func (x *Vmess) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Vmess) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *Vmess) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Vmess) GetAlterId() string {
	if x != nil {
		return x.AlterId
	}
	return ""
}

func (x *Vmess) GetPs() string {
	if x != nil {
		return x.Ps
	}
	return ""
}

func (x *Vmess) GetNet() string {
	if x != nil {
		return x.Net
	}
	return ""
}

func (x *Vmess) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Vmess) GetTls() string {
	if x != nil {
		return x.Tls
	}
	return ""
}

func (x *Vmess) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Vmess) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Vmess) GetV() string {
	if x != nil {
		return x.V
	}
	return ""
}

func (x *Vmess) GetVerifyCert() bool {
	if x != nil {
		return x.VerifyCert
	}
	return false
}

func (x *Vmess) GetClass() int64 {
	if x != nil {
		return x.Class
	}
	return 0
}

func (x *Vmess) GetSecurity() string {
	if x != nil {
		return x.Security
	}
	return ""
}

type Vmess2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// address
	Address string `protobuf:"bytes,2,opt,name=address,json=add,proto3" json:"address,omitempty"`
	Port    int32  `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	// uuid
	Uuid string `protobuf:"bytes,4,opt,name=uuid,json=id,proto3" json:"uuid,omitempty"`
	// alter id
	AlterId int32 `protobuf:"varint,5,opt,name=alter_id,json=aid,proto3" json:"alter_id,omitempty"`
	// name
	Ps string `protobuf:"bytes,6,opt,name=ps,proto3" json:"ps,omitempty"`
	// (tcp\kcp\ws\h2\quic)
	Net string `protobuf:"bytes,7,opt,name=net,proto3" json:"net,omitempty"`
	// fake type [(none\http\srtp\utp\wechat-video) *tcp or kcp or QUIC]
	Type string `protobuf:"bytes,8,opt,name=type,proto3" json:"type,omitempty"`
	Tls  string `protobuf:"bytes,9,opt,name=tls,proto3" json:"tls,omitempty"`
	// 1)http host(cut up with (,) )
	// 2)ws host
	// 3)h2 host
	// 4)QUIC security
	Host string `protobuf:"bytes,10,opt,name=host,proto3" json:"host,omitempty"`
	// 1)ws path
	// 2)h2 path
	// 3)QUIC key/Kcp seed
	Path       string `protobuf:"bytes,11,opt,name=path,proto3" json:"path,omitempty"`
	V          string `protobuf:"bytes,12,opt,name=v,proto3" json:"v,omitempty"`
	VerifyCert bool   `protobuf:"varint,13,opt,name=verify_cert,proto3" json:"verify_cert,omitempty"`
	Class      int64  `protobuf:"varint,14,opt,name=class,proto3" json:"class,omitempty"`
	Security   string `protobuf:"bytes,15,opt,name=security,proto3" json:"security,omitempty"`
}

func (x *Vmess2) Reset() {
	*x = Vmess2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_subscr_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vmess2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vmess2) ProtoMessage() {}

func (x *Vmess2) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_subscr_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vmess2.ProtoReflect.Descriptor instead.
func (*Vmess2) Descriptor() ([]byte, []int) {
	return file_pkg_subscr_node_proto_rawDescGZIP(), []int{4}
}

func (x *Vmess2) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Vmess2) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Vmess2) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Vmess2) GetAlterId() int32 {
	if x != nil {
		return x.AlterId
	}
	return 0
}

func (x *Vmess2) GetPs() string {
	if x != nil {
		return x.Ps
	}
	return ""
}

func (x *Vmess2) GetNet() string {
	if x != nil {
		return x.Net
	}
	return ""
}

func (x *Vmess2) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *Vmess2) GetTls() string {
	if x != nil {
		return x.Tls
	}
	return ""
}

func (x *Vmess2) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Vmess2) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Vmess2) GetV() string {
	if x != nil {
		return x.V
	}
	return ""
}

func (x *Vmess2) GetVerifyCert() bool {
	if x != nil {
		return x.VerifyCert
	}
	return false
}

func (x *Vmess2) GetClass() int64 {
	if x != nil {
		return x.Class
	}
	return 0
}

func (x *Vmess2) GetSecurity() string {
	if x != nil {
		return x.Security
	}
	return ""
}

type Websocket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host               string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Path               string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	InsecureSkipVerify bool   `protobuf:"varint,3,opt,name=insecure_skip_verify,proto3" json:"insecure_skip_verify,omitempty"`
	TlsEnable          bool   `protobuf:"varint,4,opt,name=tls_enable,proto3" json:"tls_enable,omitempty"`
	TlsCaCert          string `protobuf:"bytes,5,opt,name=tls_ca_cert,proto3" json:"tls_ca_cert,omitempty"`
}

func (x *Websocket) Reset() {
	*x = Websocket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_subscr_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Websocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Websocket) ProtoMessage() {}

func (x *Websocket) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_subscr_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Websocket.ProtoReflect.Descriptor instead.
func (*Websocket) Descriptor() ([]byte, []int) {
	return file_pkg_subscr_node_proto_rawDescGZIP(), []int{5}
}

func (x *Websocket) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Websocket) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Websocket) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

func (x *Websocket) GetTlsEnable() bool {
	if x != nil {
		return x.TlsEnable
	}
	return false
}

func (x *Websocket) GetTlsCaCert() string {
	if x != nil {
		return x.TlsCaCert
	}
	return ""
}

type Quic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerName         string `protobuf:"bytes,1,opt,name=server_name,proto3" json:"server_name,omitempty"`
	InsecureSkipVerify bool   `protobuf:"varint,3,opt,name=insecure_skip_verify,proto3" json:"insecure_skip_verify,omitempty"`
	TlsCaCert          string `protobuf:"bytes,5,opt,name=tls_ca_cert,proto3" json:"tls_ca_cert,omitempty"`
}

func (x *Quic) Reset() {
	*x = Quic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_subscr_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quic) ProtoMessage() {}

func (x *Quic) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_subscr_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quic.ProtoReflect.Descriptor instead.
func (*Quic) Descriptor() ([]byte, []int) {
	return file_pkg_subscr_node_proto_rawDescGZIP(), []int{6}
}

func (x *Quic) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *Quic) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

func (x *Quic) GetTlsCaCert() string {
	if x != nil {
		return x.TlsCaCert
	}
	return ""
}

type ObfsHttp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ObfsHttp) Reset() {
	*x = ObfsHttp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_subscr_node_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObfsHttp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObfsHttp) ProtoMessage() {}

func (x *ObfsHttp) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_subscr_node_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObfsHttp.ProtoReflect.Descriptor instead.
func (*ObfsHttp) Descriptor() ([]byte, []int) {
	return file_pkg_subscr_node_proto_rawDescGZIP(), []int{7}
}

func (x *ObfsHttp) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ObfsHttp) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NowNode       *Point                    `protobuf:"bytes,1,opt,name=now_node,proto3" json:"now_node,omitempty"`
	Links         map[string]*NodeLink      `protobuf:"bytes,2,rep,name=links,proto3" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Groups        []string                  `protobuf:"bytes,3,rep,name=groups,proto3" json:"groups,omitempty"`
	GroupNodesMap map[string]*NodeNodeArray `protobuf:"bytes,4,rep,name=group_nodes_map,proto3" json:"group_nodes_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Nodes         map[string]*Point         `protobuf:"bytes,5,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_subscr_node_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_subscr_node_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_pkg_subscr_node_proto_rawDescGZIP(), []int{8}
}

func (x *Node) GetNowNode() *Point {
	if x != nil {
		return x.NowNode
	}
	return nil
}

func (x *Node) GetLinks() map[string]*NodeLink {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Node) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Node) GetGroupNodesMap() map[string]*NodeNodeArray {
	if x != nil {
		return x.GroupNodesMap
	}
	return nil
}

func (x *Node) GetNodes() map[string]*Point {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type PointProtocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Protocol:
	//	*PointProtocol_Shadowsocks
	//	*PointProtocol_Shadowsocksr
	//	*PointProtocol_Vmess
	//	*PointProtocol_Websocket
	//	*PointProtocol_Quic
	//	*PointProtocol_ObfsHttp
	Protocol isPointProtocol_Protocol `protobuf_oneof:"protocol"`
}

func (x *PointProtocol) Reset() {
	*x = PointProtocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_subscr_node_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PointProtocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PointProtocol) ProtoMessage() {}

func (x *PointProtocol) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_subscr_node_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PointProtocol.ProtoReflect.Descriptor instead.
func (*PointProtocol) Descriptor() ([]byte, []int) {
	return file_pkg_subscr_node_proto_rawDescGZIP(), []int{0, 0}
}

func (m *PointProtocol) GetProtocol() isPointProtocol_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (x *PointProtocol) GetShadowsocks() *Shadowsocks {
	if x, ok := x.GetProtocol().(*PointProtocol_Shadowsocks); ok {
		return x.Shadowsocks
	}
	return nil
}

func (x *PointProtocol) GetShadowsocksr() *Shadowsocksr {
	if x, ok := x.GetProtocol().(*PointProtocol_Shadowsocksr); ok {
		return x.Shadowsocksr
	}
	return nil
}

func (x *PointProtocol) GetVmess() *Vmess {
	if x, ok := x.GetProtocol().(*PointProtocol_Vmess); ok {
		return x.Vmess
	}
	return nil
}

func (x *PointProtocol) GetWebsocket() *Websocket {
	if x, ok := x.GetProtocol().(*PointProtocol_Websocket); ok {
		return x.Websocket
	}
	return nil
}

func (x *PointProtocol) GetQuic() *Quic {
	if x, ok := x.GetProtocol().(*PointProtocol_Quic); ok {
		return x.Quic
	}
	return nil
}

func (x *PointProtocol) GetObfsHttp() *ObfsHttp {
	if x, ok := x.GetProtocol().(*PointProtocol_ObfsHttp); ok {
		return x.ObfsHttp
	}
	return nil
}

type isPointProtocol_Protocol interface {
	isPointProtocol_Protocol()
}

type PointProtocol_Shadowsocks struct {
	Shadowsocks *Shadowsocks `protobuf:"bytes,1,opt,name=shadowsocks,proto3,oneof"`
}

type PointProtocol_Shadowsocksr struct {
	Shadowsocksr *Shadowsocksr `protobuf:"bytes,2,opt,name=shadowsocksr,proto3,oneof"`
}

type PointProtocol_Vmess struct {
	Vmess *Vmess `protobuf:"bytes,3,opt,name=vmess,proto3,oneof"`
}

type PointProtocol_Websocket struct {
	Websocket *Websocket `protobuf:"bytes,4,opt,name=websocket,proto3,oneof"`
}

type PointProtocol_Quic struct {
	Quic *Quic `protobuf:"bytes,5,opt,name=quic,proto3,oneof"`
}

type PointProtocol_ObfsHttp struct {
	ObfsHttp *ObfsHttp `protobuf:"bytes,6,opt,name=obfs_http,proto3,oneof"`
}

func (*PointProtocol_Shadowsocks) isPointProtocol_Protocol() {}

func (*PointProtocol_Shadowsocksr) isPointProtocol_Protocol() {}

func (*PointProtocol_Vmess) isPointProtocol_Protocol() {}

func (*PointProtocol_Websocket) isPointProtocol_Protocol() {}

func (*PointProtocol_Quic) isPointProtocol_Protocol() {}

func (*PointProtocol_ObfsHttp) isPointProtocol_Protocol() {}

type NodeLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type string `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
	Url  string `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *NodeLink) Reset() {
	*x = NodeLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_subscr_node_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeLink) ProtoMessage() {}

func (x *NodeLink) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_subscr_node_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeLink.ProtoReflect.Descriptor instead.
func (*NodeLink) Descriptor() ([]byte, []int) {
	return file_pkg_subscr_node_proto_rawDescGZIP(), []int{8, 0}
}

func (x *NodeLink) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeLink) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *NodeLink) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type NodeNodeArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group       string            `protobuf:"bytes,1,opt,name=group,json=name,proto3" json:"group,omitempty"`
	Nodes       []string          `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	NodeHashMap map[string]string `protobuf:"bytes,3,rep,name=node_hash_map,proto3" json:"node_hash_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *NodeNodeArray) Reset() {
	*x = NodeNodeArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pkg_subscr_node_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeNodeArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeNodeArray) ProtoMessage() {}

func (x *NodeNodeArray) ProtoReflect() protoreflect.Message {
	mi := &file_pkg_subscr_node_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeNodeArray.ProtoReflect.Descriptor instead.
func (*NodeNodeArray) Descriptor() ([]byte, []int) {
	return file_pkg_subscr_node_proto_rawDescGZIP(), []int{8, 2}
}

func (x *NodeNodeArray) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *NodeNodeArray) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *NodeNodeArray) GetNodeHashMap() map[string]string {
	if x != nil {
		return x.NodeHashMap
	}
	return nil
}

var File_pkg_subscr_node_proto protoreflect.FileDescriptor

var file_pkg_subscr_node_proto_rawDesc = []byte{
	0x0a, 0x15, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e,
	0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe9, 0x07, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x1c,
	0x0a, 0x06, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x12, 0x1c, 0x0a, 0x06,
	0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x79, 0x75,
	0x68, 0x61, 0x69, 0x69, 0x6e, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x07, 0x6e, 0x5f,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x79, 0x75, 0x68,
	0x61, 0x69, 0x69, 0x6e, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3e, 0x0a, 0x08, 0x6e, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x79,
	0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x2e, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x52, 0x0e, 0x79, 0x75, 0x68, 0x61,
	0x69, 0x69, 0x6e, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x3f, 0x0a, 0x0b, 0x73, 0x68,
	0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1b, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x2e, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x42, 0x0a, 0x0c, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x72, 0x48,
	0x00, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x72, 0x12,
	0x2d, 0x0a, 0x05, 0x76, 0x6d, 0x65, 0x73, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x2e,
	0x76, 0x6d, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x05, 0x76, 0x6d, 0x65, 0x73, 0x73, 0x12, 0x39,
	0x0a, 0x09, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09,
	0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x71, 0x75, 0x69,
	0x63, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69,
	0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x2e, 0x71, 0x75, 0x69, 0x63, 0x48, 0x00, 0x52,
	0x04, 0x71, 0x75, 0x69, 0x63, 0x12, 0x39, 0x0a, 0x09, 0x6f, 0x62, 0x66, 0x73, 0x5f, 0x68, 0x74,
	0x74, 0x70, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69,
	0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x2e, 0x6f, 0x62, 0x66, 0x73, 0x5f, 0x68,
	0x74, 0x74, 0x70, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x62, 0x66, 0x73, 0x5f, 0x68, 0x74, 0x74, 0x70,
	0x12, 0x3c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x18, 0x0b, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75,
	0x62, 0x73, 0x63, 0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x1a, 0xec,
	0x02, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x3f, 0x0a, 0x0b, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1b, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x2e, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x48, 0x00, 0x52,
	0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x42, 0x0a, 0x0c,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x72, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x2e, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x72,
	0x48, 0x00, 0x52, 0x0c, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x72,
	0x12, 0x2d, 0x0a, 0x05, 0x76, 0x6d, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x15, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x2e, 0x76, 0x6d, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x05, 0x76, 0x6d, 0x65, 0x73, 0x73, 0x12,
	0x39, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x2e, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52,
	0x09, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x2a, 0x0a, 0x04, 0x71, 0x75,
	0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69,
	0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x2e, 0x71, 0x75, 0x69, 0x63, 0x48, 0x00,
	0x52, 0x04, 0x71, 0x75, 0x69, 0x63, 0x12, 0x39, 0x0a, 0x09, 0x6f, 0x62, 0x66, 0x73, 0x5f, 0x68,
	0x74, 0x74, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x79, 0x75, 0x68, 0x61,
	0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x2e, 0x6f, 0x62, 0x66, 0x73, 0x5f,
	0x68, 0x74, 0x74, 0x70, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x62, 0x66, 0x73, 0x5f, 0x68, 0x74, 0x74,
	0x70, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0x39, 0x0a,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x17, 0x0a, 0x13, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x10, 0x65, 0x12, 0x0a, 0x0a, 0x06,
	0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x66, 0x42, 0x06, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x22, 0xa5, 0x01, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73,
	0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x5f, 0x6f, 0x70, 0x74, 0x22, 0xdc, 0x01, 0x0a, 0x0c, 0x73, 0x68, 0x61,
	0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6f, 0x62, 0x66,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f, 0x62, 0x66, 0x73, 0x12, 0x1c, 0x0a,
	0x09, 0x6f, 0x62, 0x66, 0x73, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x6f, 0x62, 0x66, 0x73, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0xac, 0x02, 0x0a, 0x05, 0x76, 0x6d, 0x65, 0x73,
	0x73, 0x12, 0x14, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a,
	0x08, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x61, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6c,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x01, 0x76, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x22, 0xad, 0x02, 0x0a, 0x06, 0x76, 0x6d, 0x65, 0x73, 0x73,
	0x32, 0x12, 0x14, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x61, 0x64, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x10, 0x0a, 0x04, 0x75,
	0x75, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a,
	0x08, 0x61, 0x6c, 0x74, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x61, 0x69, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x02, 0x70, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x6e, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6e, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x6c,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x68, 0x6f, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x0c, 0x0a, 0x01, 0x76, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x01, 0x76, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f, 0x63, 0x65, 0x72,
	0x74, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x5f,
	0x63, 0x65, 0x72, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x22, 0xa9, 0x01, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x73, 0x6f,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x32, 0x0a, 0x14,
	0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x6c, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x74, 0x6c, 0x73, 0x5f, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x61, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x22, 0x7e, 0x0a, 0x04, 0x71, 0x75, 0x69, 0x63, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x32, 0x0a, 0x14,
	0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65,
	0x72, 0x69, 0x66, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x61, 0x5f, 0x63, 0x65,
	0x72, 0x74, 0x22, 0x33, 0x0a, 0x09, 0x6f, 0x62, 0x66, 0x73, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22, 0xaf, 0x06, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65,
	0x12, 0x31, 0x0a, 0x08, 0x6e, 0x6f, 0x77, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x08, 0x6e, 0x6f, 0x77, 0x5f, 0x6e,
	0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x73, 0x12, 0x51, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x79, 0x75,
	0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x5f, 0x6d, 0x61, 0x70, 0x12, 0x35, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0x40, 0x0a, 0x04,
	0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x1a, 0x53,
	0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2f,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x1a, 0xcf, 0x01, 0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x72, 0x72,
	0x61, 0x79, 0x12, 0x13, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x56, 0x0a,
	0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x61, 0x72, 0x72, 0x61, 0x79, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73,
	0x68, 0x5f, 0x6d, 0x61, 0x70, 0x1a, 0x3e, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73,
	0x68, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x61, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f,
	0x64, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x35, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x79,
	0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4f, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69,
	0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0x9b, 0x05, 0x0a, 0x0c, 0x6e, 0x6f,
	0x64, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x03, 0x6e, 0x6f,
	0x77, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x15, 0x2e, 0x79, 0x75, 0x68, 0x61,
	0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x3f, 0x0a, 0x08, 0x67, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x15, 0x2e, 0x79, 0x75, 0x68,
	0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x12, 0x39, 0x0a, 0x09, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x15,
	0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x2e,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x15, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3f, 0x0a, 0x09,
	0x67, 0x65, 0x74, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x14, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69,
	0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a,
	0x08, 0x61, 0x64, 0x64, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x19, 0x2e, 0x79, 0x75, 0x68, 0x61,
	0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x6c, 0x69, 0x6e, 0x6b, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0b,
	0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x46, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x5f, 0x6e, 0x6f, 0x77, 0x5f,
	0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x15, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0e, 0x72, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0b, 0x64,
	0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x12, 0x45, 0x0a, 0x07, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x12, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x42, 0x29, 0x5a, 0x27, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x41, 0x73, 0x75, 0x74, 0x6f, 0x72, 0x75, 0x66, 0x61, 0x2f,
	0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pkg_subscr_node_proto_rawDescOnce sync.Once
	file_pkg_subscr_node_proto_rawDescData = file_pkg_subscr_node_proto_rawDesc
)

func file_pkg_subscr_node_proto_rawDescGZIP() []byte {
	file_pkg_subscr_node_proto_rawDescOnce.Do(func() {
		file_pkg_subscr_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_pkg_subscr_node_proto_rawDescData)
	})
	return file_pkg_subscr_node_proto_rawDescData
}

var file_pkg_subscr_node_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pkg_subscr_node_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_pkg_subscr_node_proto_goTypes = []interface{}{
	(PointOrigin)(0),               // 0: yuhaiin.subscr.point.origin
	(*Point)(nil),                  // 1: yuhaiin.subscr.point
	(*Shadowsocks)(nil),            // 2: yuhaiin.subscr.shadowsocks
	(*Shadowsocksr)(nil),           // 3: yuhaiin.subscr.shadowsocksr
	(*Vmess)(nil),                  // 4: yuhaiin.subscr.vmess
	(*Vmess2)(nil),                 // 5: yuhaiin.subscr.vmess2
	(*Websocket)(nil),              // 6: yuhaiin.subscr.websocket
	(*Quic)(nil),                   // 7: yuhaiin.subscr.quic
	(*ObfsHttp)(nil),               // 8: yuhaiin.subscr.obfs_http
	(*Node)(nil),                   // 9: yuhaiin.subscr.node
	(*PointProtocol)(nil),          // 10: yuhaiin.subscr.point.protocol
	(*NodeLink)(nil),               // 11: yuhaiin.subscr.node.link
	nil,                            // 12: yuhaiin.subscr.node.LinksEntry
	(*NodeNodeArray)(nil),          // 13: yuhaiin.subscr.node.node_array
	nil,                            // 14: yuhaiin.subscr.node.GroupNodesMapEntry
	nil,                            // 15: yuhaiin.subscr.node.NodesEntry
	nil,                            // 16: yuhaiin.subscr.node.node_array.NodeHashMapEntry
	(*emptypb.Empty)(nil),          // 17: google.protobuf.Empty
	(*wrapperspb.StringValue)(nil), // 18: google.protobuf.StringValue
}
var file_pkg_subscr_node_proto_depIdxs = []int32{
	0,  // 0: yuhaiin.subscr.point.n_origin:type_name -> yuhaiin.subscr.point.origin
	2,  // 1: yuhaiin.subscr.point.shadowsocks:type_name -> yuhaiin.subscr.shadowsocks
	3,  // 2: yuhaiin.subscr.point.shadowsocksr:type_name -> yuhaiin.subscr.shadowsocksr
	4,  // 3: yuhaiin.subscr.point.vmess:type_name -> yuhaiin.subscr.vmess
	6,  // 4: yuhaiin.subscr.point.websocket:type_name -> yuhaiin.subscr.websocket
	7,  // 5: yuhaiin.subscr.point.quic:type_name -> yuhaiin.subscr.quic
	8,  // 6: yuhaiin.subscr.point.obfs_http:type_name -> yuhaiin.subscr.obfs_http
	10, // 7: yuhaiin.subscr.point.protocols:type_name -> yuhaiin.subscr.point.protocol
	1,  // 8: yuhaiin.subscr.node.now_node:type_name -> yuhaiin.subscr.point
	12, // 9: yuhaiin.subscr.node.links:type_name -> yuhaiin.subscr.node.LinksEntry
	14, // 10: yuhaiin.subscr.node.group_nodes_map:type_name -> yuhaiin.subscr.node.GroupNodesMapEntry
	15, // 11: yuhaiin.subscr.node.nodes:type_name -> yuhaiin.subscr.node.NodesEntry
	2,  // 12: yuhaiin.subscr.point.protocol.shadowsocks:type_name -> yuhaiin.subscr.shadowsocks
	3,  // 13: yuhaiin.subscr.point.protocol.shadowsocksr:type_name -> yuhaiin.subscr.shadowsocksr
	4,  // 14: yuhaiin.subscr.point.protocol.vmess:type_name -> yuhaiin.subscr.vmess
	6,  // 15: yuhaiin.subscr.point.protocol.websocket:type_name -> yuhaiin.subscr.websocket
	7,  // 16: yuhaiin.subscr.point.protocol.quic:type_name -> yuhaiin.subscr.quic
	8,  // 17: yuhaiin.subscr.point.protocol.obfs_http:type_name -> yuhaiin.subscr.obfs_http
	11, // 18: yuhaiin.subscr.node.LinksEntry.value:type_name -> yuhaiin.subscr.node.link
	16, // 19: yuhaiin.subscr.node.node_array.node_hash_map:type_name -> yuhaiin.subscr.node.node_array.NodeHashMapEntry
	13, // 20: yuhaiin.subscr.node.GroupNodesMapEntry.value:type_name -> yuhaiin.subscr.node.node_array
	1,  // 21: yuhaiin.subscr.node.NodesEntry.value:type_name -> yuhaiin.subscr.point
	17, // 22: yuhaiin.subscr.node_manager.now:input_type -> google.protobuf.Empty
	18, // 23: yuhaiin.subscr.node_manager.get_node:input_type -> google.protobuf.StringValue
	1,  // 24: yuhaiin.subscr.node_manager.save_node:input_type -> yuhaiin.subscr.point
	18, // 25: yuhaiin.subscr.node_manager.get_nodes:input_type -> google.protobuf.StringValue
	11, // 26: yuhaiin.subscr.node_manager.add_link:input_type -> yuhaiin.subscr.node.link
	18, // 27: yuhaiin.subscr.node_manager.delete_link:input_type -> google.protobuf.StringValue
	18, // 28: yuhaiin.subscr.node_manager.change_now_node:input_type -> google.protobuf.StringValue
	17, // 29: yuhaiin.subscr.node_manager.refresh_subscr:input_type -> google.protobuf.Empty
	18, // 30: yuhaiin.subscr.node_manager.delete_node:input_type -> google.protobuf.StringValue
	18, // 31: yuhaiin.subscr.node_manager.latency:input_type -> google.protobuf.StringValue
	1,  // 32: yuhaiin.subscr.node_manager.now:output_type -> yuhaiin.subscr.point
	1,  // 33: yuhaiin.subscr.node_manager.get_node:output_type -> yuhaiin.subscr.point
	1,  // 34: yuhaiin.subscr.node_manager.save_node:output_type -> yuhaiin.subscr.point
	9,  // 35: yuhaiin.subscr.node_manager.get_nodes:output_type -> yuhaiin.subscr.node
	17, // 36: yuhaiin.subscr.node_manager.add_link:output_type -> google.protobuf.Empty
	17, // 37: yuhaiin.subscr.node_manager.delete_link:output_type -> google.protobuf.Empty
	1,  // 38: yuhaiin.subscr.node_manager.change_now_node:output_type -> yuhaiin.subscr.point
	17, // 39: yuhaiin.subscr.node_manager.refresh_subscr:output_type -> google.protobuf.Empty
	17, // 40: yuhaiin.subscr.node_manager.delete_node:output_type -> google.protobuf.Empty
	18, // 41: yuhaiin.subscr.node_manager.latency:output_type -> google.protobuf.StringValue
	32, // [32:42] is the sub-list for method output_type
	22, // [22:32] is the sub-list for method input_type
	22, // [22:22] is the sub-list for extension type_name
	22, // [22:22] is the sub-list for extension extendee
	0,  // [0:22] is the sub-list for field type_name
}

func init() { file_pkg_subscr_node_proto_init() }
func file_pkg_subscr_node_proto_init() {
	if File_pkg_subscr_node_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pkg_subscr_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_subscr_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shadowsocks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_subscr_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shadowsocksr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_subscr_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vmess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_subscr_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vmess2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_subscr_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Websocket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_subscr_node_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_subscr_node_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObfsHttp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_subscr_node_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_subscr_node_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PointProtocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_subscr_node_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pkg_subscr_node_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeNodeArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_pkg_subscr_node_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Point_Shadowsocks)(nil),
		(*Point_Shadowsocksr)(nil),
		(*Point_Vmess)(nil),
		(*Point_Websocket)(nil),
		(*Point_Quic)(nil),
		(*Point_ObfsHttp)(nil),
	}
	file_pkg_subscr_node_proto_msgTypes[9].OneofWrappers = []interface{}{
		(*PointProtocol_Shadowsocks)(nil),
		(*PointProtocol_Shadowsocksr)(nil),
		(*PointProtocol_Vmess)(nil),
		(*PointProtocol_Websocket)(nil),
		(*PointProtocol_Quic)(nil),
		(*PointProtocol_ObfsHttp)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pkg_subscr_node_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pkg_subscr_node_proto_goTypes,
		DependencyIndexes: file_pkg_subscr_node_proto_depIdxs,
		EnumInfos:         file_pkg_subscr_node_proto_enumTypes,
		MessageInfos:      file_pkg_subscr_node_proto_msgTypes,
	}.Build()
	File_pkg_subscr_node_proto = out.File
	file_pkg_subscr_node_proto_rawDesc = nil
	file_pkg_subscr_node_proto_goTypes = nil
	file_pkg_subscr_node_proto_depIdxs = nil
}
