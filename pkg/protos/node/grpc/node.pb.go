// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.0
// 	protoc        v5.29.2
// source: node/grpc/node.proto

package service

import (
	node "github.com/Asutorufa/yuhaiin/pkg/protos/node"
	latency "github.com/Asutorufa/yuhaiin/pkg/protos/node/latency"
	point "github.com/Asutorufa/yuhaiin/pkg/protos/node/point"
	subscribe "github.com/Asutorufa/yuhaiin/pkg/protos/node/subscribe"
	tag "github.com/Asutorufa/yuhaiin/pkg/protos/node/tag"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type NowResp struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tcp           *point.Point           `protobuf:"bytes,1,opt,name=tcp,proto3" json:"tcp,omitempty"`
	Udp           *point.Point           `protobuf:"bytes,2,opt,name=udp,proto3" json:"udp,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NowResp) Reset() {
	*x = NowResp{}
	mi := &file_node_grpc_node_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NowResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NowResp) ProtoMessage() {}

func (x *NowResp) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NowResp.ProtoReflect.Descriptor instead.
func (*NowResp) Descriptor() ([]byte, []int) {
	return file_node_grpc_node_proto_rawDescGZIP(), []int{0}
}

func (x *NowResp) GetTcp() *point.Point {
	if x != nil {
		return x.Tcp
	}
	return nil
}

func (x *NowResp) GetUdp() *point.Point {
	if x != nil {
		return x.Udp
	}
	return nil
}

type UseReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tcp           bool                   `protobuf:"varint,1,opt,name=tcp,proto3" json:"tcp,omitempty"`
	Udp           bool                   `protobuf:"varint,2,opt,name=udp,proto3" json:"udp,omitempty"`
	Hash          string                 `protobuf:"bytes,3,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UseReq) Reset() {
	*x = UseReq{}
	mi := &file_node_grpc_node_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UseReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UseReq) ProtoMessage() {}

func (x *UseReq) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UseReq.ProtoReflect.Descriptor instead.
func (*UseReq) Descriptor() ([]byte, []int) {
	return file_node_grpc_node_proto_rawDescGZIP(), []int{1}
}

func (x *UseReq) GetTcp() bool {
	if x != nil {
		return x.Tcp
	}
	return false
}

func (x *UseReq) GetUdp() bool {
	if x != nil {
		return x.Udp
	}
	return false
}

func (x *UseReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type NodesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Groups        map[string]*node.Nodes `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *NodesResponse) Reset() {
	*x = NodesResponse{}
	mi := &file_node_grpc_node_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *NodesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodesResponse) ProtoMessage() {}

func (x *NodesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodesResponse.ProtoReflect.Descriptor instead.
func (*NodesResponse) Descriptor() ([]byte, []int) {
	return file_node_grpc_node_proto_rawDescGZIP(), []int{2}
}

func (x *NodesResponse) GetGroups() map[string]*node.Nodes {
	if x != nil {
		return x.Groups
	}
	return nil
}

type SaveLinkReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Links         []*subscribe.Link      `protobuf:"bytes,1,rep,name=links,proto3" json:"links,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveLinkReq) Reset() {
	*x = SaveLinkReq{}
	mi := &file_node_grpc_node_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveLinkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveLinkReq) ProtoMessage() {}

func (x *SaveLinkReq) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveLinkReq.ProtoReflect.Descriptor instead.
func (*SaveLinkReq) Descriptor() ([]byte, []int) {
	return file_node_grpc_node_proto_rawDescGZIP(), []int{3}
}

func (x *SaveLinkReq) GetLinks() []*subscribe.Link {
	if x != nil {
		return x.Links
	}
	return nil
}

type LinkReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Names         []string               `protobuf:"bytes,1,rep,name=names,proto3" json:"names,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *LinkReq) Reset() {
	*x = LinkReq{}
	mi := &file_node_grpc_node_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *LinkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LinkReq) ProtoMessage() {}

func (x *LinkReq) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LinkReq.ProtoReflect.Descriptor instead.
func (*LinkReq) Descriptor() ([]byte, []int) {
	return file_node_grpc_node_proto_rawDescGZIP(), []int{4}
}

func (x *LinkReq) GetNames() []string {
	if x != nil {
		return x.Names
	}
	return nil
}

type GetLinksResp struct {
	state         protoimpl.MessageState     `protogen:"open.v1"`
	Links         map[string]*subscribe.Link `protobuf:"bytes,1,rep,name=links,proto3" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetLinksResp) Reset() {
	*x = GetLinksResp{}
	mi := &file_node_grpc_node_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetLinksResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetLinksResp) ProtoMessage() {}

func (x *GetLinksResp) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetLinksResp.ProtoReflect.Descriptor instead.
func (*GetLinksResp) Descriptor() ([]byte, []int) {
	return file_node_grpc_node_proto_rawDescGZIP(), []int{5}
}

func (x *GetLinksResp) GetLinks() map[string]*subscribe.Link {
	if x != nil {
		return x.Links
	}
	return nil
}

type SaveTagReq struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tag           string                 `protobuf:"bytes,1,opt,name=tag,proto3" json:"tag,omitempty"`
	Type          tag.TagType            `protobuf:"varint,3,opt,name=type,proto3,enum=yuhaiin.tag.TagType" json:"type,omitempty"`
	Hash          string                 `protobuf:"bytes,2,opt,name=hash,proto3" json:"hash,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SaveTagReq) Reset() {
	*x = SaveTagReq{}
	mi := &file_node_grpc_node_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SaveTagReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SaveTagReq) ProtoMessage() {}

func (x *SaveTagReq) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SaveTagReq.ProtoReflect.Descriptor instead.
func (*SaveTagReq) Descriptor() ([]byte, []int) {
	return file_node_grpc_node_proto_rawDescGZIP(), []int{6}
}

func (x *SaveTagReq) GetTag() string {
	if x != nil {
		return x.Tag
	}
	return ""
}

func (x *SaveTagReq) GetType() tag.TagType {
	if x != nil {
		return x.Type
	}
	return tag.TagType(0)
}

func (x *SaveTagReq) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

type TagsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Tags          map[string]*tag.Tags   `protobuf:"bytes,1,rep,name=tags,proto3" json:"tags,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *TagsResponse) Reset() {
	*x = TagsResponse{}
	mi := &file_node_grpc_node_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TagsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TagsResponse) ProtoMessage() {}

func (x *TagsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_node_grpc_node_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TagsResponse.ProtoReflect.Descriptor instead.
func (*TagsResponse) Descriptor() ([]byte, []int) {
	return file_node_grpc_node_proto_rawDescGZIP(), []int{7}
}

func (x *TagsResponse) GetTags() map[string]*tag.Tags {
	if x != nil {
		return x.Tags
	}
	return nil
}

var File_node_grpc_node_proto protoreflect.FileDescriptor

var file_node_grpc_node_proto_rawDesc = []byte{
	0x0a, 0x14, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2f, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x1b, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x16, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2f, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x6e, 0x6f, 0x64, 0x65, 0x2f,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x2f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x62, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1a, 0x6e, 0x6f, 0x64, 0x65, 0x2f,
	0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x2f, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x12, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x74, 0x61, 0x67, 0x2f,
	0x74, 0x61, 0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5a, 0x0a, 0x08, 0x6e, 0x6f, 0x77,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x12, 0x26, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x03, 0x74, 0x63, 0x70, 0x12, 0x26, 0x0a,
	0x03, 0x75, 0x64, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x75, 0x68,
	0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x52, 0x03, 0x75, 0x64, 0x70, 0x22, 0x41, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71,
	0x12, 0x10, 0x0a, 0x03, 0x74, 0x63, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x03, 0x74,
	0x63, 0x70, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x64, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x03, 0x75, 0x64, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x68, 0x61, 0x73, 0x68, 0x22, 0xb1, 0x01, 0x0a, 0x0e, 0x6e, 0x6f, 0x64,
	0x65, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4f, 0x0a, 0x06, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x79, 0x75,
	0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64,
	0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x5f,
	0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0x4e, 0x0a, 0x0b,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x3e, 0x0a, 0x0d,
	0x73, 0x61, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x2d, 0x0a,
	0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79,
	0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65,
	0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x22, 0x20, 0x0a, 0x08,
	0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x22, 0xb1,
	0x01, 0x0a, 0x0e, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x12, 0x4c, 0x0a, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x36, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x67,
	0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x1a,
	0x51, 0x0a, 0x0a, 0x4c, 0x69, 0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x2d, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69,
	0x62, 0x65, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0x5f, 0x0a, 0x0c, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x72,
	0x65, 0x71, 0x12, 0x10, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x74, 0x61, 0x67, 0x12, 0x29, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x15, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x74, 0x61, 0x67,
	0x2e, 0x74, 0x61, 0x67, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68,
	0x61, 0x73, 0x68, 0x22, 0xa5, 0x01, 0x0a, 0x0d, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x72, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x48, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x34, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x1a,
	0x4a, 0x0a, 0x09, 0x54, 0x61, 0x67, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x27,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e,
	0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x74, 0x61, 0x67, 0x2e, 0x74, 0x61, 0x67, 0x73,
	0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xcc, 0x03, 0x0a, 0x04,
	0x6e, 0x6f, 0x64, 0x65, 0x12, 0x44, 0x0a, 0x03, 0x6e, 0x6f, 0x77, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x6e, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x12, 0x41, 0x0a, 0x03, 0x75, 0x73,
	0x65, 0x12, 0x24, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x75, 0x73, 0x65, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x14, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69,
	0x6e, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x39, 0x0a,
	0x03, 0x67, 0x65, 0x74, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x1a, 0x14, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x32, 0x0a, 0x04, 0x73, 0x61, 0x76, 0x65,
	0x12, 0x14, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x1a, 0x14, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e,
	0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x06,
	0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4b, 0x0a, 0x04,
	0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2b, 0x2e, 0x79,
	0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3f, 0x0a, 0x07, 0x6c, 0x61, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x12, 0x19, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c,
	0x61, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x2e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x1a,
	0x19, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6c, 0x61, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x2e, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0xb5, 0x02, 0x0a, 0x09, 0x73,
	0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x12, 0x4a, 0x0a, 0x04, 0x73, 0x61, 0x76, 0x65,
	0x12, 0x2a, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x73,
	0x61, 0x76, 0x65, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12, 0x25,
	0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e,
	0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x69, 0x6e,
	0x6b, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a,
	0x06, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x12, 0x25, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x03, 0x67, 0x65, 0x74, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2b, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x67, 0x65, 0x74, 0x5f, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x5f, 0x72, 0x65,
	0x73, 0x70, 0x32, 0xdc, 0x01, 0x0a, 0x03, 0x74, 0x61, 0x67, 0x12, 0x49, 0x0a, 0x04, 0x73, 0x61,
	0x76, 0x65, 0x12, 0x29, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x73, 0x61, 0x76, 0x65, 0x5f, 0x74, 0x61, 0x67, 0x5f, 0x72, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x3e, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x12,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4a, 0x0a, 0x04, 0x6c, 0x69, 0x73, 0x74, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x2a, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x74, 0x61, 0x67, 0x73, 0x5f, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x41, 0x73, 0x75, 0x74, 0x6f, 0x72, 0x75, 0x66, 0x61, 0x2f, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69,
	0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6e, 0x6f, 0x64,
	0x65, 0x2f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_node_grpc_node_proto_rawDescOnce sync.Once
	file_node_grpc_node_proto_rawDescData = file_node_grpc_node_proto_rawDesc
)

func file_node_grpc_node_proto_rawDescGZIP() []byte {
	file_node_grpc_node_proto_rawDescOnce.Do(func() {
		file_node_grpc_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_node_grpc_node_proto_rawDescData)
	})
	return file_node_grpc_node_proto_rawDescData
}

var file_node_grpc_node_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_node_grpc_node_proto_goTypes = []any{
	(*NowResp)(nil),                // 0: yuhaiin.protos.node.service.now_resp
	(*UseReq)(nil),                 // 1: yuhaiin.protos.node.service.use_req
	(*NodesResponse)(nil),          // 2: yuhaiin.protos.node.service.nodes_response
	(*SaveLinkReq)(nil),            // 3: yuhaiin.protos.node.service.save_link_req
	(*LinkReq)(nil),                // 4: yuhaiin.protos.node.service.link_req
	(*GetLinksResp)(nil),           // 5: yuhaiin.protos.node.service.get_links_resp
	(*SaveTagReq)(nil),             // 6: yuhaiin.protos.node.service.save_tag_req
	(*TagsResponse)(nil),           // 7: yuhaiin.protos.node.service.tags_response
	nil,                            // 8: yuhaiin.protos.node.service.nodes_response.GroupsEntry
	nil,                            // 9: yuhaiin.protos.node.service.get_links_resp.LinksEntry
	nil,                            // 10: yuhaiin.protos.node.service.tags_response.TagsEntry
	(*point.Point)(nil),            // 11: yuhaiin.point.point
	(*subscribe.Link)(nil),         // 12: yuhaiin.subscribe.link
	(tag.TagType)(0),               // 13: yuhaiin.tag.tag_type
	(*node.Nodes)(nil),             // 14: yuhaiin.node.nodes
	(*tag.Tags)(nil),               // 15: yuhaiin.tag.tags
	(*emptypb.Empty)(nil),          // 16: google.protobuf.Empty
	(*wrapperspb.StringValue)(nil), // 17: google.protobuf.StringValue
	(*latency.Requests)(nil),       // 18: yuhaiin.latency.requests
	(*latency.Response)(nil),       // 19: yuhaiin.latency.response
}
var file_node_grpc_node_proto_depIdxs = []int32{
	11, // 0: yuhaiin.protos.node.service.now_resp.tcp:type_name -> yuhaiin.point.point
	11, // 1: yuhaiin.protos.node.service.now_resp.udp:type_name -> yuhaiin.point.point
	8,  // 2: yuhaiin.protos.node.service.nodes_response.groups:type_name -> yuhaiin.protos.node.service.nodes_response.GroupsEntry
	12, // 3: yuhaiin.protos.node.service.save_link_req.links:type_name -> yuhaiin.subscribe.link
	9,  // 4: yuhaiin.protos.node.service.get_links_resp.links:type_name -> yuhaiin.protos.node.service.get_links_resp.LinksEntry
	13, // 5: yuhaiin.protos.node.service.save_tag_req.type:type_name -> yuhaiin.tag.tag_type
	10, // 6: yuhaiin.protos.node.service.tags_response.tags:type_name -> yuhaiin.protos.node.service.tags_response.TagsEntry
	14, // 7: yuhaiin.protos.node.service.nodes_response.GroupsEntry.value:type_name -> yuhaiin.node.nodes
	12, // 8: yuhaiin.protos.node.service.get_links_resp.LinksEntry.value:type_name -> yuhaiin.subscribe.link
	15, // 9: yuhaiin.protos.node.service.tags_response.TagsEntry.value:type_name -> yuhaiin.tag.tags
	16, // 10: yuhaiin.protos.node.service.node.now:input_type -> google.protobuf.Empty
	1,  // 11: yuhaiin.protos.node.service.node.use:input_type -> yuhaiin.protos.node.service.use_req
	17, // 12: yuhaiin.protos.node.service.node.get:input_type -> google.protobuf.StringValue
	11, // 13: yuhaiin.protos.node.service.node.save:input_type -> yuhaiin.point.point
	17, // 14: yuhaiin.protos.node.service.node.remove:input_type -> google.protobuf.StringValue
	16, // 15: yuhaiin.protos.node.service.node.list:input_type -> google.protobuf.Empty
	18, // 16: yuhaiin.protos.node.service.node.latency:input_type -> yuhaiin.latency.requests
	3,  // 17: yuhaiin.protos.node.service.subscribe.save:input_type -> yuhaiin.protos.node.service.save_link_req
	4,  // 18: yuhaiin.protos.node.service.subscribe.remove:input_type -> yuhaiin.protos.node.service.link_req
	4,  // 19: yuhaiin.protos.node.service.subscribe.update:input_type -> yuhaiin.protos.node.service.link_req
	16, // 20: yuhaiin.protos.node.service.subscribe.get:input_type -> google.protobuf.Empty
	6,  // 21: yuhaiin.protos.node.service.tag.save:input_type -> yuhaiin.protos.node.service.save_tag_req
	17, // 22: yuhaiin.protos.node.service.tag.remove:input_type -> google.protobuf.StringValue
	16, // 23: yuhaiin.protos.node.service.tag.list:input_type -> google.protobuf.Empty
	0,  // 24: yuhaiin.protos.node.service.node.now:output_type -> yuhaiin.protos.node.service.now_resp
	11, // 25: yuhaiin.protos.node.service.node.use:output_type -> yuhaiin.point.point
	11, // 26: yuhaiin.protos.node.service.node.get:output_type -> yuhaiin.point.point
	11, // 27: yuhaiin.protos.node.service.node.save:output_type -> yuhaiin.point.point
	16, // 28: yuhaiin.protos.node.service.node.remove:output_type -> google.protobuf.Empty
	2,  // 29: yuhaiin.protos.node.service.node.list:output_type -> yuhaiin.protos.node.service.nodes_response
	19, // 30: yuhaiin.protos.node.service.node.latency:output_type -> yuhaiin.latency.response
	16, // 31: yuhaiin.protos.node.service.subscribe.save:output_type -> google.protobuf.Empty
	16, // 32: yuhaiin.protos.node.service.subscribe.remove:output_type -> google.protobuf.Empty
	16, // 33: yuhaiin.protos.node.service.subscribe.update:output_type -> google.protobuf.Empty
	5,  // 34: yuhaiin.protos.node.service.subscribe.get:output_type -> yuhaiin.protos.node.service.get_links_resp
	16, // 35: yuhaiin.protos.node.service.tag.save:output_type -> google.protobuf.Empty
	16, // 36: yuhaiin.protos.node.service.tag.remove:output_type -> google.protobuf.Empty
	7,  // 37: yuhaiin.protos.node.service.tag.list:output_type -> yuhaiin.protos.node.service.tags_response
	24, // [24:38] is the sub-list for method output_type
	10, // [10:24] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_node_grpc_node_proto_init() }
func file_node_grpc_node_proto_init() {
	if File_node_grpc_node_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_node_grpc_node_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   3,
		},
		GoTypes:           file_node_grpc_node_proto_goTypes,
		DependencyIndexes: file_node_grpc_node_proto_depIdxs,
		MessageInfos:      file_node_grpc_node_proto_msgTypes,
	}.Build()
	File_node_grpc_node_proto = out.File
	file_node_grpc_node_proto_rawDesc = nil
	file_node_grpc_node_proto_goTypes = nil
	file_node_grpc_node_proto_depIdxs = nil
}
