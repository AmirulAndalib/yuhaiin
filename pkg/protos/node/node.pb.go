// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.7
// source: node/node.proto

package node

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	_ "google.golang.org/protobuf/types/known/durationpb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PointOriginType int32

const (
	Point_node_origin_reserve PointOriginType = 0
	Point_remote              PointOriginType = 101
	Point_manual              PointOriginType = 102
)

// Enum value maps for PointOriginType.
var (
	PointOriginType_name = map[int32]string{
		0:   "node_origin_reserve",
		101: "remote",
		102: "manual",
	}
	PointOriginType_value = map[string]int32{
		"node_origin_reserve": 0,
		"remote":              101,
		"manual":              102,
	}
)

func (x PointOriginType) Enum() *PointOriginType {
	p := new(PointOriginType)
	*p = x
	return p
}

func (x PointOriginType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PointOriginType) Descriptor() protoreflect.EnumDescriptor {
	return file_node_node_proto_enumTypes[0].Descriptor()
}

func (PointOriginType) Type() protoreflect.EnumType {
	return &file_node_node_proto_enumTypes[0]
}

func (x PointOriginType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PointOriginType.Descriptor instead.
func (PointOriginType) EnumDescriptor() ([]byte, []int) {
	return file_node_node_proto_rawDescGZIP(), []int{1, 0}
}

type NodeLinkLinkType int32

const (
	NodeLink_reserve      NodeLinkLinkType = 0
	NodeLink_trojan       NodeLinkLinkType = 1
	NodeLink_vmess        NodeLinkLinkType = 2
	NodeLink_shadowsocks  NodeLinkLinkType = 3
	NodeLink_shadowsocksr NodeLinkLinkType = 4
)

// Enum value maps for NodeLinkLinkType.
var (
	NodeLinkLinkType_name = map[int32]string{
		0: "reserve",
		1: "trojan",
		2: "vmess",
		3: "shadowsocks",
		4: "shadowsocksr",
	}
	NodeLinkLinkType_value = map[string]int32{
		"reserve":      0,
		"trojan":       1,
		"vmess":        2,
		"shadowsocks":  3,
		"shadowsocksr": 4,
	}
)

func (x NodeLinkLinkType) Enum() *NodeLinkLinkType {
	p := new(NodeLinkLinkType)
	*p = x
	return p
}

func (x NodeLinkLinkType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (NodeLinkLinkType) Descriptor() protoreflect.EnumDescriptor {
	return file_node_node_proto_enumTypes[1].Descriptor()
}

func (NodeLinkLinkType) Type() protoreflect.EnumType {
	return &file_node_node_proto_enumTypes[1]
}

func (x NodeLinkLinkType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use NodeLinkLinkType.Descriptor instead.
func (NodeLinkLinkType) EnumDescriptor() ([]byte, []int) {
	return file_node_node_proto_rawDescGZIP(), []int{14, 0, 0}
}

type Protocol struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Protocol:
	//	*Protocol_Shadowsocks
	//	*Protocol_Shadowsocksr
	//	*Protocol_Vmess
	//	*Protocol_Websocket
	//	*Protocol_Quic
	//	*Protocol_ObfsHttp
	//	*Protocol_Trojan
	//	*Protocol_Simple
	//	*Protocol_None
	//	*Protocol_Socks5
	//	*Protocol_Http
	Protocol isProtocol_Protocol `protobuf_oneof:"protocol"`
}

func (x *Protocol) Reset() {
	*x = Protocol{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_node_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Protocol) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Protocol) ProtoMessage() {}

func (x *Protocol) ProtoReflect() protoreflect.Message {
	mi := &file_node_node_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Protocol.ProtoReflect.Descriptor instead.
func (*Protocol) Descriptor() ([]byte, []int) {
	return file_node_node_proto_rawDescGZIP(), []int{0}
}

func (m *Protocol) GetProtocol() isProtocol_Protocol {
	if m != nil {
		return m.Protocol
	}
	return nil
}

func (x *Protocol) GetShadowsocks() *Shadowsocks {
	if x, ok := x.GetProtocol().(*Protocol_Shadowsocks); ok {
		return x.Shadowsocks
	}
	return nil
}

func (x *Protocol) GetShadowsocksr() *Shadowsocksr {
	if x, ok := x.GetProtocol().(*Protocol_Shadowsocksr); ok {
		return x.Shadowsocksr
	}
	return nil
}

func (x *Protocol) GetVmess() *Vmess {
	if x, ok := x.GetProtocol().(*Protocol_Vmess); ok {
		return x.Vmess
	}
	return nil
}

func (x *Protocol) GetWebsocket() *Websocket {
	if x, ok := x.GetProtocol().(*Protocol_Websocket); ok {
		return x.Websocket
	}
	return nil
}

func (x *Protocol) GetQuic() *Quic {
	if x, ok := x.GetProtocol().(*Protocol_Quic); ok {
		return x.Quic
	}
	return nil
}

func (x *Protocol) GetObfsHttp() *ObfsHttp {
	if x, ok := x.GetProtocol().(*Protocol_ObfsHttp); ok {
		return x.ObfsHttp
	}
	return nil
}

func (x *Protocol) GetTrojan() *Trojan {
	if x, ok := x.GetProtocol().(*Protocol_Trojan); ok {
		return x.Trojan
	}
	return nil
}

func (x *Protocol) GetSimple() *Simple {
	if x, ok := x.GetProtocol().(*Protocol_Simple); ok {
		return x.Simple
	}
	return nil
}

func (x *Protocol) GetNone() *None {
	if x, ok := x.GetProtocol().(*Protocol_None); ok {
		return x.None
	}
	return nil
}

func (x *Protocol) GetSocks5() *Socks5 {
	if x, ok := x.GetProtocol().(*Protocol_Socks5); ok {
		return x.Socks5
	}
	return nil
}

func (x *Protocol) GetHttp() *Http {
	if x, ok := x.GetProtocol().(*Protocol_Http); ok {
		return x.Http
	}
	return nil
}

type isProtocol_Protocol interface {
	isProtocol_Protocol()
}

type Protocol_Shadowsocks struct {
	Shadowsocks *Shadowsocks `protobuf:"bytes,1,opt,name=shadowsocks,proto3,oneof"`
}

type Protocol_Shadowsocksr struct {
	Shadowsocksr *Shadowsocksr `protobuf:"bytes,2,opt,name=shadowsocksr,proto3,oneof"`
}

type Protocol_Vmess struct {
	Vmess *Vmess `protobuf:"bytes,3,opt,name=vmess,proto3,oneof"`
}

type Protocol_Websocket struct {
	Websocket *Websocket `protobuf:"bytes,4,opt,name=websocket,proto3,oneof"`
}

type Protocol_Quic struct {
	Quic *Quic `protobuf:"bytes,5,opt,name=quic,proto3,oneof"`
}

type Protocol_ObfsHttp struct {
	ObfsHttp *ObfsHttp `protobuf:"bytes,6,opt,name=obfs_http,proto3,oneof"`
}

type Protocol_Trojan struct {
	Trojan *Trojan `protobuf:"bytes,7,opt,name=trojan,proto3,oneof"`
}

type Protocol_Simple struct {
	Simple *Simple `protobuf:"bytes,8,opt,name=simple,proto3,oneof"`
}

type Protocol_None struct {
	None *None `protobuf:"bytes,9,opt,name=none,proto3,oneof"`
}

type Protocol_Socks5 struct {
	Socks5 *Socks5 `protobuf:"bytes,10,opt,name=socks5,proto3,oneof"`
}

type Protocol_Http struct {
	Http *Http `protobuf:"bytes,11,opt,name=http,proto3,oneof"`
}

func (*Protocol_Shadowsocks) isProtocol_Protocol() {}

func (*Protocol_Shadowsocksr) isProtocol_Protocol() {}

func (*Protocol_Vmess) isProtocol_Protocol() {}

func (*Protocol_Websocket) isProtocol_Protocol() {}

func (*Protocol_Quic) isProtocol_Protocol() {}

func (*Protocol_ObfsHttp) isProtocol_Protocol() {}

func (*Protocol_Trojan) isProtocol_Protocol() {}

func (*Protocol_Simple) isProtocol_Protocol() {}

func (*Protocol_None) isProtocol_Protocol() {}

func (*Protocol_Socks5) isProtocol_Protocol() {}

func (*Protocol_Http) isProtocol_Protocol() {}

type Point struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hash   string          `protobuf:"bytes,1,opt,name=hash,proto3" json:"hash,omitempty"`
	Name   string          `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Group  string          `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	Origin PointOriginType `protobuf:"varint,4,opt,name=origin,proto3,enum=yuhaiin.node.PointOriginType" json:"origin,omitempty"`
	// will use protocols' order to create dialer
	Protocols []*Protocol `protobuf:"bytes,5,rep,name=protocols,proto3" json:"protocols,omitempty"`
}

func (x *Point) Reset() {
	*x = Point{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_node_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Point) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Point) ProtoMessage() {}

func (x *Point) ProtoReflect() protoreflect.Message {
	mi := &file_node_node_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Point.ProtoReflect.Descriptor instead.
func (*Point) Descriptor() ([]byte, []int) {
	return file_node_node_proto_rawDescGZIP(), []int{1}
}

func (x *Point) GetHash() string {
	if x != nil {
		return x.Hash
	}
	return ""
}

func (x *Point) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Point) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *Point) GetOrigin() PointOriginType {
	if x != nil {
		return x.Origin
	}
	return Point_node_origin_reserve
}

func (x *Point) GetProtocols() []*Protocol {
	if x != nil {
		return x.Protocols
	}
	return nil
}

type Socks5 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// eg: 127.0.0.1
	Hostname string `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Port     int32  `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	User     string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"` // TODO: add override hostname options
}

func (x *Socks5) Reset() {
	*x = Socks5{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_node_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Socks5) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Socks5) ProtoMessage() {}

func (x *Socks5) ProtoReflect() protoreflect.Message {
	mi := &file_node_node_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Socks5.ProtoReflect.Descriptor instead.
func (*Socks5) Descriptor() ([]byte, []int) {
	return file_node_node_proto_rawDescGZIP(), []int{2}
}

func (x *Socks5) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *Socks5) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Socks5) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Socks5) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Http struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	User     string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Http) Reset() {
	*x = Http{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_node_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Http) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Http) ProtoMessage() {}

func (x *Http) ProtoReflect() protoreflect.Message {
	mi := &file_node_node_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Http.ProtoReflect.Descriptor instead.
func (*Http) Descriptor() ([]byte, []int) {
	return file_node_node_proto_rawDescGZIP(), []int{3}
}

func (x *Http) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Http) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Shadowsocks struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server   string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Port     string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	Method   string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Password string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *Shadowsocks) Reset() {
	*x = Shadowsocks{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_node_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shadowsocks) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shadowsocks) ProtoMessage() {}

func (x *Shadowsocks) ProtoReflect() protoreflect.Message {
	mi := &file_node_node_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shadowsocks.ProtoReflect.Descriptor instead.
func (*Shadowsocks) Descriptor() ([]byte, []int) {
	return file_node_node_proto_rawDescGZIP(), []int{4}
}

func (x *Shadowsocks) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *Shadowsocks) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *Shadowsocks) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Shadowsocks) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

type Shadowsocksr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Server     string `protobuf:"bytes,1,opt,name=server,proto3" json:"server,omitempty"`
	Port       string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
	Method     string `protobuf:"bytes,3,opt,name=method,proto3" json:"method,omitempty"`
	Password   string `protobuf:"bytes,4,opt,name=password,proto3" json:"password,omitempty"`
	Obfs       string `protobuf:"bytes,5,opt,name=obfs,proto3" json:"obfs,omitempty"`
	Obfsparam  string `protobuf:"bytes,6,opt,name=obfsparam,proto3" json:"obfsparam,omitempty"`
	Protocol   string `protobuf:"bytes,7,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Protoparam string `protobuf:"bytes,8,opt,name=protoparam,proto3" json:"protoparam,omitempty"`
}

func (x *Shadowsocksr) Reset() {
	*x = Shadowsocksr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_node_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Shadowsocksr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Shadowsocksr) ProtoMessage() {}

func (x *Shadowsocksr) ProtoReflect() protoreflect.Message {
	mi := &file_node_node_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Shadowsocksr.ProtoReflect.Descriptor instead.
func (*Shadowsocksr) Descriptor() ([]byte, []int) {
	return file_node_node_proto_rawDescGZIP(), []int{5}
}

func (x *Shadowsocksr) GetServer() string {
	if x != nil {
		return x.Server
	}
	return ""
}

func (x *Shadowsocksr) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

func (x *Shadowsocksr) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *Shadowsocksr) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Shadowsocksr) GetObfs() string {
	if x != nil {
		return x.Obfs
	}
	return ""
}

func (x *Shadowsocksr) GetObfsparam() string {
	if x != nil {
		return x.Obfsparam
	}
	return ""
}

func (x *Shadowsocksr) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *Shadowsocksr) GetProtoparam() string {
	if x != nil {
		return x.Protoparam
	}
	return ""
}

type Vmess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// uuid
	Uuid string `protobuf:"bytes,1,opt,name=uuid,json=id,proto3" json:"uuid,omitempty"`
	// alter id
	AlterId  string `protobuf:"bytes,2,opt,name=alter_id,json=aid,proto3" json:"alter_id,omitempty"`
	Security string `protobuf:"bytes,3,opt,name=security,proto3" json:"security,omitempty"`
}

func (x *Vmess) Reset() {
	*x = Vmess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_node_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Vmess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Vmess) ProtoMessage() {}

func (x *Vmess) ProtoReflect() protoreflect.Message {
	mi := &file_node_node_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Vmess.ProtoReflect.Descriptor instead.
func (*Vmess) Descriptor() ([]byte, []int) {
	return file_node_node_proto_rawDescGZIP(), []int{6}
}

func (x *Vmess) GetUuid() string {
	if x != nil {
		return x.Uuid
	}
	return ""
}

func (x *Vmess) GetAlterId() string {
	if x != nil {
		return x.AlterId
	}
	return ""
}

func (x *Vmess) GetSecurity() string {
	if x != nil {
		return x.Security
	}
	return ""
}

type Trojan struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Password string `protobuf:"bytes,1,opt,name=password,proto3" json:"password,omitempty"`
	Peer     string `protobuf:"bytes,2,opt,name=peer,proto3" json:"peer,omitempty"`
}

func (x *Trojan) Reset() {
	*x = Trojan{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_node_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Trojan) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Trojan) ProtoMessage() {}

func (x *Trojan) ProtoReflect() protoreflect.Message {
	mi := &file_node_node_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Trojan.ProtoReflect.Descriptor instead.
func (*Trojan) Descriptor() ([]byte, []int) {
	return file_node_node_proto_rawDescGZIP(), []int{7}
}

func (x *Trojan) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Trojan) GetPeer() string {
	if x != nil {
		return x.Peer
	}
	return ""
}

type Websocket struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string     `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Path string     `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	Tls  *TlsConfig `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *Websocket) Reset() {
	*x = Websocket{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_node_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Websocket) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Websocket) ProtoMessage() {}

func (x *Websocket) ProtoReflect() protoreflect.Message {
	mi := &file_node_node_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Websocket.ProtoReflect.Descriptor instead.
func (*Websocket) Descriptor() ([]byte, []int) {
	return file_node_node_proto_rawDescGZIP(), []int{8}
}

func (x *Websocket) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Websocket) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *Websocket) GetTls() *TlsConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

type Quic struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tls *TlsConfig `protobuf:"bytes,1,opt,name=tls,proto3" json:"tls,omitempty"`
}

func (x *Quic) Reset() {
	*x = Quic{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_node_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Quic) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Quic) ProtoMessage() {}

func (x *Quic) ProtoReflect() protoreflect.Message {
	mi := &file_node_node_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Quic.ProtoReflect.Descriptor instead.
func (*Quic) Descriptor() ([]byte, []int) {
	return file_node_node_proto_rawDescGZIP(), []int{9}
}

func (x *Quic) GetTls() *TlsConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

type ObfsHttp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port string `protobuf:"bytes,2,opt,name=port,proto3" json:"port,omitempty"`
}

func (x *ObfsHttp) Reset() {
	*x = ObfsHttp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_node_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ObfsHttp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ObfsHttp) ProtoMessage() {}

func (x *ObfsHttp) ProtoReflect() protoreflect.Message {
	mi := &file_node_node_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ObfsHttp.ProtoReflect.Descriptor instead.
func (*ObfsHttp) Descriptor() ([]byte, []int) {
	return file_node_node_proto_rawDescGZIP(), []int{10}
}

func (x *ObfsHttp) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *ObfsHttp) GetPort() string {
	if x != nil {
		return x.Port
	}
	return ""
}

type None struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *None) Reset() {
	*x = None{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_node_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *None) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*None) ProtoMessage() {}

func (x *None) ProtoReflect() protoreflect.Message {
	mi := &file_node_node_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use None.ProtoReflect.Descriptor instead.
func (*None) Descriptor() ([]byte, []int) {
	return file_node_node_proto_rawDescGZIP(), []int{11}
}

type Simple struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Host string     `protobuf:"bytes,1,opt,name=host,proto3" json:"host,omitempty"`
	Port int32      `protobuf:"varint,2,opt,name=port,proto3" json:"port,omitempty"`
	Tls  *TlsConfig `protobuf:"bytes,3,opt,name=tls,json=tls_config,proto3" json:"tls,omitempty"`
}

func (x *Simple) Reset() {
	*x = Simple{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_node_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Simple) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Simple) ProtoMessage() {}

func (x *Simple) ProtoReflect() protoreflect.Message {
	mi := &file_node_node_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Simple.ProtoReflect.Descriptor instead.
func (*Simple) Descriptor() ([]byte, []int) {
	return file_node_node_proto_rawDescGZIP(), []int{12}
}

func (x *Simple) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *Simple) GetPort() int32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *Simple) GetTls() *TlsConfig {
	if x != nil {
		return x.Tls
	}
	return nil
}

type TlsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enable             bool     `protobuf:"varint,1,opt,name=enable,proto3" json:"enable,omitempty"`
	ServerName         string   `protobuf:"bytes,2,opt,name=server_name,proto3" json:"server_name,omitempty"`
	CaCert             [][]byte `protobuf:"bytes,3,rep,name=ca_cert,proto3" json:"ca_cert,omitempty"`
	InsecureSkipVerify bool     `protobuf:"varint,4,opt,name=insecure_skip_verify,proto3" json:"insecure_skip_verify,omitempty"`
}

func (x *TlsConfig) Reset() {
	*x = TlsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_node_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TlsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TlsConfig) ProtoMessage() {}

func (x *TlsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_node_node_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TlsConfig.ProtoReflect.Descriptor instead.
func (*TlsConfig) Descriptor() ([]byte, []int) {
	return file_node_node_proto_rawDescGZIP(), []int{13}
}

func (x *TlsConfig) GetEnable() bool {
	if x != nil {
		return x.Enable
	}
	return false
}

func (x *TlsConfig) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *TlsConfig) GetCaCert() [][]byte {
	if x != nil {
		return x.CaCert
	}
	return nil
}

func (x *TlsConfig) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

type Node struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Tcp     *Point               `protobuf:"bytes,4,opt,name=tcp,proto3" json:"tcp,omitempty"`
	Udp     *Point               `protobuf:"bytes,5,opt,name=udp,proto3" json:"udp,omitempty"`
	Links   map[string]*NodeLink `protobuf:"bytes,2,rep,name=links,proto3" json:"links,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Manager *Manager             `protobuf:"bytes,3,opt,name=manager,proto3" json:"manager,omitempty"`
}

func (x *Node) Reset() {
	*x = Node{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_node_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Node) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Node) ProtoMessage() {}

func (x *Node) ProtoReflect() protoreflect.Message {
	mi := &file_node_node_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Node.ProtoReflect.Descriptor instead.
func (*Node) Descriptor() ([]byte, []int) {
	return file_node_node_proto_rawDescGZIP(), []int{14}
}

func (x *Node) GetTcp() *Point {
	if x != nil {
		return x.Tcp
	}
	return nil
}

func (x *Node) GetUdp() *Point {
	if x != nil {
		return x.Udp
	}
	return nil
}

func (x *Node) GetLinks() map[string]*NodeLink {
	if x != nil {
		return x.Links
	}
	return nil
}

func (x *Node) GetManager() *Manager {
	if x != nil {
		return x.Manager
	}
	return nil
}

type Manager struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Groups        []string                     `protobuf:"bytes,1,rep,name=groups,proto3" json:"groups,omitempty"`
	GroupNodesMap map[string]*ManagerNodeArray `protobuf:"bytes,2,rep,name=group_nodes_map,proto3" json:"group_nodes_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	Nodes         map[string]*Point            `protobuf:"bytes,3,rep,name=nodes,proto3" json:"nodes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Manager) Reset() {
	*x = Manager{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_node_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Manager) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Manager) ProtoMessage() {}

func (x *Manager) ProtoReflect() protoreflect.Message {
	mi := &file_node_node_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Manager.ProtoReflect.Descriptor instead.
func (*Manager) Descriptor() ([]byte, []int) {
	return file_node_node_proto_rawDescGZIP(), []int{15}
}

func (x *Manager) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *Manager) GetGroupNodesMap() map[string]*ManagerNodeArray {
	if x != nil {
		return x.GroupNodesMap
	}
	return nil
}

func (x *Manager) GetNodes() map[string]*Point {
	if x != nil {
		return x.Nodes
	}
	return nil
}

type NodeLink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string           `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type NodeLinkLinkType `protobuf:"varint,2,opt,name=type,proto3,enum=yuhaiin.node.NodeLinkLinkType" json:"type,omitempty"`
	Url  string           `protobuf:"bytes,3,opt,name=url,proto3" json:"url,omitempty"`
}

func (x *NodeLink) Reset() {
	*x = NodeLink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_node_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeLink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeLink) ProtoMessage() {}

func (x *NodeLink) ProtoReflect() protoreflect.Message {
	mi := &file_node_node_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeLink.ProtoReflect.Descriptor instead.
func (*NodeLink) Descriptor() ([]byte, []int) {
	return file_node_node_proto_rawDescGZIP(), []int{14, 0}
}

func (x *NodeLink) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *NodeLink) GetType() NodeLinkLinkType {
	if x != nil {
		return x.Type
	}
	return NodeLink_reserve
}

func (x *NodeLink) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type ManagerNodeArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Group       string            `protobuf:"bytes,1,opt,name=group,json=name,proto3" json:"group,omitempty"`
	Nodes       []string          `protobuf:"bytes,2,rep,name=nodes,proto3" json:"nodes,omitempty"`
	NodeHashMap map[string]string `protobuf:"bytes,3,rep,name=node_hash_map,proto3" json:"node_hash_map,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *ManagerNodeArray) Reset() {
	*x = ManagerNodeArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_node_node_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ManagerNodeArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ManagerNodeArray) ProtoMessage() {}

func (x *ManagerNodeArray) ProtoReflect() protoreflect.Message {
	mi := &file_node_node_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ManagerNodeArray.ProtoReflect.Descriptor instead.
func (*ManagerNodeArray) Descriptor() ([]byte, []int) {
	return file_node_node_proto_rawDescGZIP(), []int{15, 0}
}

func (x *ManagerNodeArray) GetGroup() string {
	if x != nil {
		return x.Group
	}
	return ""
}

func (x *ManagerNodeArray) GetNodes() []string {
	if x != nil {
		return x.Nodes
	}
	return nil
}

func (x *ManagerNodeArray) GetNodeHashMap() map[string]string {
	if x != nil {
		return x.NodeHashMap
	}
	return nil
}

var File_node_node_proto protoreflect.FileDescriptor

var file_node_node_proto_rawDesc = []byte{
	0x0a, 0x0f, 0x6e, 0x6f, 0x64, 0x65, 0x2f, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x12, 0x0c, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x1a,
	0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22,
	0xc4, 0x04, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x3d, 0x0a, 0x0b,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x19, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x48, 0x00, 0x52, 0x0b,
	0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x40, 0x0a, 0x0c, 0x73,
	0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x72, 0x48, 0x00, 0x52,
	0x0c, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x72, 0x12, 0x2b, 0x0a,
	0x05, 0x76, 0x6d, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79,
	0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x76, 0x6d, 0x65, 0x73,
	0x73, 0x48, 0x00, 0x52, 0x05, 0x76, 0x6d, 0x65, 0x73, 0x73, 0x12, 0x37, 0x0a, 0x09, 0x77, 0x65,
	0x62, 0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x77, 0x65, 0x62,
	0x73, 0x6f, 0x63, 0x6b, 0x65, 0x74, 0x48, 0x00, 0x52, 0x09, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63,
	0x6b, 0x65, 0x74, 0x12, 0x28, 0x0a, 0x04, 0x71, 0x75, 0x69, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x12, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65,
	0x2e, 0x71, 0x75, 0x69, 0x63, 0x48, 0x00, 0x52, 0x04, 0x71, 0x75, 0x69, 0x63, 0x12, 0x37, 0x0a,
	0x09, 0x6f, 0x62, 0x66, 0x73, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x6f, 0x62, 0x66, 0x73, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x48, 0x00, 0x52, 0x09, 0x6f, 0x62, 0x66,
	0x73, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x12, 0x2e, 0x0a, 0x06, 0x74, 0x72, 0x6f, 0x6a, 0x61, 0x6e,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x72, 0x6f, 0x6a, 0x61, 0x6e, 0x48, 0x00, 0x52, 0x06,
	0x74, 0x72, 0x6f, 0x6a, 0x61, 0x6e, 0x12, 0x2e, 0x0a, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x48, 0x00, 0x52, 0x06,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x6f, 0x6e, 0x65, 0x48, 0x00, 0x52, 0x04, 0x6e, 0x6f, 0x6e, 0x65,
	0x12, 0x2e, 0x0a, 0x06, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x35, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x14, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x73, 0x6f, 0x63, 0x6b, 0x73, 0x35, 0x48, 0x00, 0x52, 0x06, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x35,
	0x12, 0x28, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x68, 0x74,
	0x74, 0x70, 0x48, 0x00, 0x52, 0x04, 0x68, 0x74, 0x74, 0x70, 0x42, 0x0a, 0x0a, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x22, 0xf4, 0x01, 0x0a, 0x05, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x68, 0x61, 0x73, 0x68, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75,
	0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x37,
	0x0a, 0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x6f,
	0x69, 0x6e, 0x74, 0x2e, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52,
	0x06, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x12, 0x34, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x79, 0x75, 0x68,
	0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x6f, 0x6c, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x73, 0x22, 0x3e, 0x0a,
	0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x12, 0x17, 0x0a, 0x13,
	0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x6f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x5f, 0x72, 0x65, 0x73, 0x65,
	0x72, 0x76, 0x65, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x10,
	0x65, 0x12, 0x0a, 0x0a, 0x06, 0x6d, 0x61, 0x6e, 0x75, 0x61, 0x6c, 0x10, 0x66, 0x22, 0x68, 0x0a,
	0x06, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x35, 0x12, 0x1a, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0x36, 0x0a, 0x04, 0x68, 0x74, 0x74, 0x70, 0x12,
	0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22,
	0x6d, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x12, 0x16,
	0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65,
	0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68,
	0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x22, 0xdc,
	0x01, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x64, 0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x72, 0x12,
	0x16, 0x0a, 0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d,
	0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74,
	0x68, 0x6f, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12,
	0x12, 0x0a, 0x04, 0x6f, 0x62, 0x66, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6f,
	0x62, 0x66, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x6f, 0x62, 0x66, 0x73, 0x70, 0x61, 0x72, 0x61, 0x6d,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6f, 0x62, 0x66, 0x73, 0x70, 0x61, 0x72, 0x61,
	0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x70, 0x61, 0x72, 0x61, 0x6d, 0x22, 0x4c, 0x0a,
	0x05, 0x76, 0x6d, 0x65, 0x73, 0x73, 0x12, 0x10, 0x0a, 0x04, 0x75, 0x75, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x15, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x61, 0x69, 0x64, 0x12,
	0x1a, 0x0a, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x08, 0x73, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x22, 0x38, 0x0a, 0x06, 0x74,
	0x72, 0x6f, 0x6a, 0x61, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x65, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x70, 0x65, 0x65, 0x72, 0x22, 0x5f, 0x0a, 0x09, 0x77, 0x65, 0x62, 0x73, 0x6f, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2a, 0x0a, 0x03, 0x74, 0x6c,
	0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69,
	0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x22, 0x32, 0x0a, 0x04, 0x71, 0x75, 0x69, 0x63, 0x12, 0x2a,
	0x0a, 0x03, 0x74, 0x6c, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x75,
	0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x6c, 0x73, 0x5f, 0x63,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x03, 0x74, 0x6c, 0x73, 0x22, 0x33, 0x0a, 0x09, 0x6f, 0x62,
	0x66, 0x73, 0x5f, 0x68, 0x74, 0x74, 0x70, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x22,
	0x06, 0x0a, 0x04, 0x6e, 0x6f, 0x6e, 0x65, 0x22, 0x63, 0x0a, 0x06, 0x73, 0x69, 0x6d, 0x70, 0x6c,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x31, 0x0a, 0x03, 0x74, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e,
	0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0a, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0x94, 0x01, 0x0a,
	0x0a, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x07, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x12,
	0x32, 0x0a, 0x14, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70,
	0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x14, 0x69,
	0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72,
	0x69, 0x66, 0x79, 0x22, 0xc7, 0x03, 0x0a, 0x04, 0x6e, 0x6f, 0x64, 0x65, 0x12, 0x25, 0x0a, 0x03,
	0x74, 0x63, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x75, 0x68, 0x61,
	0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x03,
	0x74, 0x63, 0x70, 0x12, 0x25, 0x0a, 0x03, 0x75, 0x64, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x13, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x03, 0x75, 0x64, 0x70, 0x12, 0x33, 0x0a, 0x05, 0x6c, 0x69,
	0x6e, 0x6b, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x79, 0x75, 0x68, 0x61,
	0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6c, 0x69, 0x6e, 0x6b, 0x73, 0x12,
	0x2f, 0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x15, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72,
	0x1a, 0xb7, 0x01, 0x0a, 0x04, 0x6c, 0x69, 0x6e, 0x6b, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x35, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x79, 0x75,
	0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e,
	0x6c, 0x69, 0x6e, 0x6b, 0x2e, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x22, 0x52, 0x0a, 0x09, 0x6c, 0x69, 0x6e, 0x6b, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x72, 0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x10, 0x00,
	0x12, 0x0a, 0x0a, 0x06, 0x74, 0x72, 0x6f, 0x6a, 0x61, 0x6e, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05,
	0x76, 0x6d, 0x65, 0x73, 0x73, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x73, 0x68, 0x61, 0x64, 0x6f,
	0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x73, 0x68, 0x61, 0x64,
	0x6f, 0x77, 0x73, 0x6f, 0x63, 0x6b, 0x73, 0x72, 0x10, 0x04, 0x1a, 0x51, 0x0a, 0x0a, 0x4c, 0x69,
	0x6e, 0x6b, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2d, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x79, 0x75, 0x68, 0x61,
	0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6c, 0x69,
	0x6e, 0x6b, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xb3, 0x04,
	0x0a, 0x07, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x12, 0x52, 0x0a, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65, 0x73,
	0x5f, 0x6d, 0x61, 0x70, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x79, 0x75, 0x68,
	0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65,
	0x72, 0x2e, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x52, 0x0f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x6e, 0x6f, 0x64, 0x65,
	0x73, 0x5f, 0x6d, 0x61, 0x70, 0x12, 0x36, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x4e, 0x6f, 0x64, 0x65,
	0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x1a, 0xd0, 0x01,
	0x0a, 0x0a, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x12, 0x13, 0x0a, 0x05,
	0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x05, 0x6e, 0x6f, 0x64, 0x65, 0x73, 0x12, 0x57, 0x0a, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f,
	0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x61, 0x70, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31,
	0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79,
	0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x52, 0x0d, 0x6e, 0x6f, 0x64, 0x65, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x5f, 0x6d, 0x61, 0x70,
	0x1a, 0x3e, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x48, 0x61, 0x73, 0x68, 0x4d, 0x61, 0x70, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x1a, 0x62, 0x0a, 0x12, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x4d, 0x61,
	0x70, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x36, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69,
	0x6e, 0x2e, 0x6e, 0x6f, 0x64, 0x65, 0x2e, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x2e, 0x6e,
	0x6f, 0x64, 0x65, 0x5f, 0x61, 0x72, 0x72, 0x61, 0x79, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x4d, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x73, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x29, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x79, 0x75, 0x68, 0x61, 0x69, 0x69, 0x6e, 0x2e, 0x6e, 0x6f,
	0x64, 0x65, 0x2e, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a,
	0x02, 0x38, 0x01, 0x42, 0x2e, 0x5a, 0x2c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x41, 0x73, 0x75, 0x74, 0x6f, 0x72, 0x75, 0x66, 0x61, 0x2f, 0x79, 0x75, 0x68, 0x61,
	0x69, 0x69, 0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x73, 0x2f, 0x6e,
	0x6f, 0x64, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_node_node_proto_rawDescOnce sync.Once
	file_node_node_proto_rawDescData = file_node_node_proto_rawDesc
)

func file_node_node_proto_rawDescGZIP() []byte {
	file_node_node_proto_rawDescOnce.Do(func() {
		file_node_node_proto_rawDescData = protoimpl.X.CompressGZIP(file_node_node_proto_rawDescData)
	})
	return file_node_node_proto_rawDescData
}

var file_node_node_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_node_node_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_node_node_proto_goTypes = []interface{}{
	(PointOriginType)(0),     // 0: yuhaiin.node.point.origin_type
	(NodeLinkLinkType)(0),    // 1: yuhaiin.node.node.link.link_type
	(*Protocol)(nil),         // 2: yuhaiin.node.protocol
	(*Point)(nil),            // 3: yuhaiin.node.point
	(*Socks5)(nil),           // 4: yuhaiin.node.socks5
	(*Http)(nil),             // 5: yuhaiin.node.http
	(*Shadowsocks)(nil),      // 6: yuhaiin.node.shadowsocks
	(*Shadowsocksr)(nil),     // 7: yuhaiin.node.shadowsocksr
	(*Vmess)(nil),            // 8: yuhaiin.node.vmess
	(*Trojan)(nil),           // 9: yuhaiin.node.trojan
	(*Websocket)(nil),        // 10: yuhaiin.node.websocket
	(*Quic)(nil),             // 11: yuhaiin.node.quic
	(*ObfsHttp)(nil),         // 12: yuhaiin.node.obfs_http
	(*None)(nil),             // 13: yuhaiin.node.none
	(*Simple)(nil),           // 14: yuhaiin.node.simple
	(*TlsConfig)(nil),        // 15: yuhaiin.node.tls_config
	(*Node)(nil),             // 16: yuhaiin.node.node
	(*Manager)(nil),          // 17: yuhaiin.node.manager
	(*NodeLink)(nil),         // 18: yuhaiin.node.node.link
	nil,                      // 19: yuhaiin.node.node.LinksEntry
	(*ManagerNodeArray)(nil), // 20: yuhaiin.node.manager.node_array
	nil,                      // 21: yuhaiin.node.manager.GroupNodesMapEntry
	nil,                      // 22: yuhaiin.node.manager.NodesEntry
	nil,                      // 23: yuhaiin.node.manager.node_array.NodeHashMapEntry
}
var file_node_node_proto_depIdxs = []int32{
	6,  // 0: yuhaiin.node.protocol.shadowsocks:type_name -> yuhaiin.node.shadowsocks
	7,  // 1: yuhaiin.node.protocol.shadowsocksr:type_name -> yuhaiin.node.shadowsocksr
	8,  // 2: yuhaiin.node.protocol.vmess:type_name -> yuhaiin.node.vmess
	10, // 3: yuhaiin.node.protocol.websocket:type_name -> yuhaiin.node.websocket
	11, // 4: yuhaiin.node.protocol.quic:type_name -> yuhaiin.node.quic
	12, // 5: yuhaiin.node.protocol.obfs_http:type_name -> yuhaiin.node.obfs_http
	9,  // 6: yuhaiin.node.protocol.trojan:type_name -> yuhaiin.node.trojan
	14, // 7: yuhaiin.node.protocol.simple:type_name -> yuhaiin.node.simple
	13, // 8: yuhaiin.node.protocol.none:type_name -> yuhaiin.node.none
	4,  // 9: yuhaiin.node.protocol.socks5:type_name -> yuhaiin.node.socks5
	5,  // 10: yuhaiin.node.protocol.http:type_name -> yuhaiin.node.http
	0,  // 11: yuhaiin.node.point.origin:type_name -> yuhaiin.node.point.origin_type
	2,  // 12: yuhaiin.node.point.protocols:type_name -> yuhaiin.node.protocol
	15, // 13: yuhaiin.node.websocket.tls:type_name -> yuhaiin.node.tls_config
	15, // 14: yuhaiin.node.quic.tls:type_name -> yuhaiin.node.tls_config
	15, // 15: yuhaiin.node.simple.tls:type_name -> yuhaiin.node.tls_config
	3,  // 16: yuhaiin.node.node.tcp:type_name -> yuhaiin.node.point
	3,  // 17: yuhaiin.node.node.udp:type_name -> yuhaiin.node.point
	19, // 18: yuhaiin.node.node.links:type_name -> yuhaiin.node.node.LinksEntry
	17, // 19: yuhaiin.node.node.manager:type_name -> yuhaiin.node.manager
	21, // 20: yuhaiin.node.manager.group_nodes_map:type_name -> yuhaiin.node.manager.GroupNodesMapEntry
	22, // 21: yuhaiin.node.manager.nodes:type_name -> yuhaiin.node.manager.NodesEntry
	1,  // 22: yuhaiin.node.node.link.type:type_name -> yuhaiin.node.node.link.link_type
	18, // 23: yuhaiin.node.node.LinksEntry.value:type_name -> yuhaiin.node.node.link
	23, // 24: yuhaiin.node.manager.node_array.node_hash_map:type_name -> yuhaiin.node.manager.node_array.NodeHashMapEntry
	20, // 25: yuhaiin.node.manager.GroupNodesMapEntry.value:type_name -> yuhaiin.node.manager.node_array
	3,  // 26: yuhaiin.node.manager.NodesEntry.value:type_name -> yuhaiin.node.point
	27, // [27:27] is the sub-list for method output_type
	27, // [27:27] is the sub-list for method input_type
	27, // [27:27] is the sub-list for extension type_name
	27, // [27:27] is the sub-list for extension extendee
	0,  // [0:27] is the sub-list for field type_name
}

func init() { file_node_node_proto_init() }
func file_node_node_proto_init() {
	if File_node_node_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_node_node_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Protocol); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_node_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Point); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_node_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Socks5); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_node_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Http); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_node_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shadowsocks); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_node_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Shadowsocksr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_node_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Vmess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_node_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Trojan); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_node_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Websocket); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_node_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Quic); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_node_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ObfsHttp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_node_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*None); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_node_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Simple); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_node_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TlsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_node_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Node); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_node_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Manager); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_node_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeLink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_node_node_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ManagerNodeArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_node_node_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*Protocol_Shadowsocks)(nil),
		(*Protocol_Shadowsocksr)(nil),
		(*Protocol_Vmess)(nil),
		(*Protocol_Websocket)(nil),
		(*Protocol_Quic)(nil),
		(*Protocol_ObfsHttp)(nil),
		(*Protocol_Trojan)(nil),
		(*Protocol_Simple)(nil),
		(*Protocol_None)(nil),
		(*Protocol_Socks5)(nil),
		(*Protocol_Http)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_node_node_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_node_node_proto_goTypes,
		DependencyIndexes: file_node_node_proto_depIdxs,
		EnumInfos:         file_node_node_proto_enumTypes,
		MessageInfos:      file_node_node_proto_msgTypes,
	}.Build()
	File_node_node_proto = out.File
	file_node_node_proto_rawDesc = nil
	file_node_node_proto_goTypes = nil
	file_node_node_proto_depIdxs = nil
}
