name: Go

on:
  push:
    branches: [ main ]
    tags: [ v* ]
  pull_request:
    branches: [ main ]

jobs:

  rule:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        check-latest: true
        go-version-file: 'go.mod'
    
    - name: download rule
      run: |
        cd internal/statics
        curl https://raw.githubusercontent.com/yuhaiin/yuhaiin/ACL/yuhaiin/yuhaiin.conf -o bypass.conf
        go run generate.go
        echo ${PWD}
        ls

    - name: Cache Rule
      id: cache-rule
      uses: actions/cache@v4
      with:
        path: internal/statics/bypass.gz
        key: cache-rule-${{ github.run_id }}-${{ github.run_attempt }}

  web:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        check-latest: true
        go-version-file: 'go.mod'

    - name: clone
      run: |
        cd internal/http
        git clone -b main --depth=1 https://github.com/yuhaiin/yuhaiin.github.io.git out
        cd out && git branch -v && cd ..
        rm -rf out/.git out/.nojekyll
        go run generate.go
        echo ${PWD}
        ls

    - name: Cache Front Out
      id: cache-front-out
      uses: actions/cache@v4
      with:
        path: internal/http/out
        key: cache-front-out-${{ github.run_id }}-${{ github.run_attempt }}

  package:
    needs: [web,rule]
    runs-on: ubuntu-latest
    permissions:
      packages: write
      contents: read
      
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: '0'
          fetch-tags: 'true'

      - name: Cache Front Out
        id: cache-front-out
        uses: actions/cache@v4
        with:
          path: internal/http/out
          key: cache-front-out-${{ github.run_id }}-${{ github.run_attempt }}
    
      - name: Cache Rule
        id: cache-rule
        uses: actions/cache@v4
        with:
          path: internal/statics/bypass.gz
          key: cache-rule-${{ github.run_id }}-${{ github.run_attempt }}
     
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          flavor: latest=true
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - # Add support for more platforms with QEMU (optional)
        # https://github.com/docker/setup-qemu-action
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          file: cmd/yuhaiin/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  build:
    needs: [web,rule]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        arch: [amd64, amd64v3]
        os: [[linux, ""], [linux_lite, ""], [darwin, ""], [windows, ".exe"]]
        cmd: [yuhaiin]

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: '0'
        fetch-tags: 'true'

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        check-latest: true
        go-version-file: 'go.mod'

    - name: Cache Front Out
      id: cache-front-out
      uses: actions/cache@v4
      with:
        path: internal/http/out
        key: cache-front-out-${{ github.run_id }}-${{ github.run_attempt }}
    
    - name: Cache Rule
      id: cache-rule
      uses: actions/cache@v4
      with:
        path: internal/statics/bypass.gz
        key: cache-rule-${{ github.run_id }}-${{ github.run_attempt }}

    # - name: Set up Upx
    #   run: |
    #     sudo apt update
    #     sudo apt install -y upx

        # if [ ${{ matrix.os[0] }} != "darwin" ]; then
          # upx --lzma --best ${{ matrix.cmd }}_${{ matrix.os[0] }}_${{ matrix.arch }}${{ matrix.os[1] }}
        # fi
    - name: Build
      run: |
        make ${{ matrix.cmd }}_${{ matrix.os[0] }}

    - name: upload_${{ matrix.cmd }}_${{ matrix.os[0] }}_${{ matrix.arch }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.cmd }}_${{ matrix.os[0] }}_${{ matrix.arch }}
        path: |
          ${{ matrix.cmd }}_${{ matrix.os[0] }}_${{ matrix.arch }}${{ matrix.os[1] }}
